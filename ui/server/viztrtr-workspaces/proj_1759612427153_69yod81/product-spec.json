{
  "projectId": "proj_1759612427153_69yod81",
  "version": 1,
  "createdAt": "2025-10-04T21:31:24.031Z",
  "lastUpdated": "2025-10-04T21:31:24.031Z",
  "productVision": "Performia is a revolutionary music performance system that transforms live performance by combining real-time audio analysis with an intelligent Living Chart teleprompter, enabling musicians to focus entirely on their artistry without worrying about forgetting lyrics or chords.",
  "targetUsers": [
    "Live performers (vocalists, guitarists, bands) performing 3-4 gigs per week who need large fonts readable from 6ft away with zero distractions",
    "Rehearsal musicians learning new songs who need to edit chords and structure while practicing with isolated stems",
    "Casual hobbyists practicing at home who need a simple, intuitive interface to explore and learn demo songs"
  ],
  "components": {
    "TeleprompterView": {
      "purpose": "Fullscreen lyrics display with real-time syllable highlighting and auto-scrolling, serving as the primary performance interface",
      "userStories": [
        "As a live performer, I need lyrics that highlight in real-time as I sing so I never lose my place during performance",
        "As a vocalist, I need the active line centered on screen so I can read ahead without head movement",
        "As a guitarist, I need chords displayed above lyrics with customizable visibility so I can reference them without distraction",
        "As a stage performer, I need fonts large enough to read from 6ft away so I can perform without stepping closer to the screen"
      ],
      "designPriorities": [
        "Maximum legibility",
        "Zero-latency feel",
        "Minimal visual distraction",
        "Performance readiness"
      ],
      "focusAreas": [
        "Font size control with 50%-150% range (2.5rem to 6rem)",
        "Real-time syllable highlighting with cyan glow effect",
        "Auto-scroll with active line centered at 50% viewport",
        "High contrast color scheme (near-black background, cool white text)",
        "Chord display positioning and sizing relative to lyrics (80% ratio)",
        "Past lyrics opacity reduction (30%) for visual hierarchy",
        "60fps sustained rendering for smooth scrolling"
      ],
      "avoidAreas": [
        "Complex animations during active performance",
        "UI chrome or controls overlaying lyrics area",
        "Automatic font size adjustments without user control",
        "Distracting transition effects between sections"
      ],
      "acceptanceCriteria": [
        "Font size minimum 2.5rem, default 3.5rem, maximum 6rem",
        "Syllable highlight latency under 50ms from audio playback",
        "Active line maintains 50% viewport position during auto-scroll",
        "60fps sustained for 10-minute song duration",
        "WCAG AAA contrast ratio (16:1) for lyrics text",
        "Chord visibility toggles between off, names, and diagrams",
        "Readable from 6ft distance in stage lighting conditions"
      ],
      "status": "active"
    },
    "AudioPlayer": {
      "purpose": "Full-featured audio playback controls with progress tracking, volume control, and real-time sync with lyrics display",
      "userStories": [
        "As a performer, I need play/pause controls that respond instantly so I can control playback without interrupting my flow",
        "As a rehearsal musician, I need to seek to specific song sections quickly so I can practice difficult parts",
        "As a user, I need volume control with mute option so I can adjust audio levels without leaving performance mode",
        "As a performer, I need to see current time and total duration so I can pace my performance"
      ],
      "designPriorities": [
        "Instant responsiveness",
        "Visual clarity",
        "Touch-friendly controls",
        "Status visibility"
      ],
      "focusAreas": [
        "Large play/pause button with clear icon states (play ▶, pause ⏸)",
        "Draggable progress bar with cyan fill and precise seeking",
        "Volume slider with mute toggle and clear audio level icons",
        "Monospace time display for consistent width (MM:SS format)",
        "Container styling with gray-800 background and 8px radius",
        "Real-time sync callback to parent component for syllable tracking",
        "Loading and buffering state indicators"
      ],
      "avoidAreas": [
        "Auto-play without user interaction",
        "Complex playback controls that clutter the interface",
        "Abrupt audio transitions without fade effects",
        "Hidden volume controls requiring hover or long-press"
      ],
      "acceptanceCriteria": [
        "Play/pause response time under 100ms",
        "Progress bar draggable with 1-second precision",
        "Volume control range 0.0 to 1.0 with smooth adjustment",
        "Audio latency under 50ms from control interaction",
        "Time display updates every 100ms during playback",
        "Minimum touch target size 44x44px for all controls",
        "Keyboard accessible (Space for play/pause)"
      ],
      "status": "active"
    },
    "StemSelector": {
      "purpose": "Audio stem selection interface allowing users to toggle between full mix, vocals, bass, drums, and other instrumental tracks",
      "userStories": [
        "As a rehearsal musician, I need to isolate vocal stems so I can practice singing without competing with original vocals",
        "As a bass player, I need to mute bass stems so I can practice my parts with the rest of the band",
        "As a user, I need to see which stems are available before selecting so I know what isolation options exist",
        "As a performer, I need instant stem switching so I can adapt my practice session without interruption"
      ],
      "designPriorities": [
        "Availability transparency",
        "Fast switching",
        "Clear active state",
        "Loading feedback"
      ],
      "focusAreas": [
        "5 stem type buttons (Full Mix, Vocals, Bass, Drums, Other)",
        "Visual distinction between selected, unselected, loading, and unavailable states",
        "Selected state with cyan background, black text, 105% scale, and play icon",
        "Loading state with 50% opacity and spinning clock icon",
        "Unavailable state with 60% opacity and disabled interaction",
        "HEAD request availability check before display",
        "Smooth state transitions between stems"
      ],
      "avoidAreas": [
        "Automatic stem selection without user choice",
        "Hidden stem availability information",
        "Slow stem loading without progress feedback",
        "Confusing button states or unclear labels"
      ],
      "acceptanceCriteria": [
        "All 5 stem types displayed with clear labels",
        "Availability check completes in under 2 seconds",
        "Selected state visually distinct with cyan background and scale effect",
        "Loading spinner visible during stem fetch (estimated 1-3 seconds)",
        "Unavailable stems clearly marked and non-interactive",
        "Stem switch response time under 500ms after availability confirmation",
        "Keyboard accessible with arrow key navigation"
      ],
      "status": "active"
    },
    "FullChart": {
      "purpose": "Document-style song editor for viewing and editing complete song structure, lyrics, chords, and metadata",
      "userStories": [
        "As a rehearsal musician, I need to edit auto-generated chords inline so I can correct mistakes without leaving the app",
        "As a song arranger, I need to add, remove, and reorder sections so I can customize song structure for my performance",
        "As a user, I need to edit song title, artist, key, and BPM metadata so I can keep my library organized",
        "As a musician, I need to see the complete song structure at once so I can understand arrangement and flow"
      ],
      "designPriorities": [
        "Inline editability",
        "Clear structure visualization",
        "Efficient editing workflow",
        "Data persistence"
      ],
      "focusAreas": [
        "Editable title and artist fields with click-to-edit interaction",
        "Section headers (Verse, Chorus, Bridge) with visual hierarchy",
        "Inline chord editing above lyrics with autocomplete (planned Sprint 4)",
        "Drag handles for section reordering (planned Sprint 4)",
        "Add section button with section type selection",
        "Real-time chord validation and suggestions",
        "Document-style layout with comfortable reading width"
      ],
      "avoidAreas": [
        "Complex WYSIWYG editor features that slow down editing",
        "Modal dialogs for simple edits",
        "Auto-save without user awareness or undo capability",
        "Overwhelming formatting options that distract from content"
      ],
      "acceptanceCriteria": [
        "Click any text field to enable inline editing",
        "Chord autocomplete popup appears within 200ms of typing",
        "Section reordering via drag completes in under 1 second",
        "Changes persist to Song Map JSON immediately",
        "Undo/redo supports last 20 actions",
        "Keyboard shortcuts for common edits (Cmd+B for bold chord, etc.)",
        "Validation prevents invalid chord names or structure"
      ],
      "status": "active"
    },
    "LibraryView": {
      "purpose": "Song search and library management interface for browsing, filtering, and organizing uploaded songs",
      "userStories": [
        "As a performer, I need to search songs by title or artist instantly so I can find songs quickly before a gig",
        "As a user, I need to filter songs by key, BPM, or genre so I can build setlists with compatible songs",
        "As a library manager, I need to see song metadata on cards so I can identify songs at a glance",
        "As a performer, I need quick actions (Play, Edit, Delete) on song cards so I can manage my library efficiently"
      ],
      "designPriorities": [
        "Search speed",
        "Filter clarity",
        "Metadata visibility",
        "Quick actions"
      ],
      "focusAreas": [
        "Instant search with fuzzy matching across title, artist, lyrics, and tags",
        "Filter controls for genre, key, BPM range, and difficulty level",
        "Sort options (title, date added, last played, BPM)",
        "Song card layout with thumbnail, title, artist, key, BPM, and duration",
        "Quick action buttons (Play, Edit, Delete) on hover or touch",
        "Grid or list view toggle for user preference",
        "Search autocomplete suggestions (planned Sprint 4)"
      ],
      "avoidAreas": [
        "Slow search results requiring server round-trip",
        "Complex filter UI that requires multiple steps",
        "Hidden metadata requiring card expansion",
        "Destructive actions without confirmation dialogs"
      ],
      "acceptanceCriteria": [
        "Search results appear in under 100ms for local library",
        "Fuzzy matching finds songs with 80% title/artist similarity",
        "Filter application updates results in under 200ms",
        "Song cards display 6 metadata fields minimum",
        "Quick actions accessible with single click or tap",
        "Keyboard navigation through search results with arrow keys",
        "Delete action requires confirmation before execution"
      ],
      "status": "active"
    },
    "SettingsPanel": {
      "purpose": "Slide-in panel for quick access to performance settings including font size, transpose, capo, and chord display options",
      "userStories": [
        "As a performer, I need to adjust font size quickly so I can optimize readability for different stage distances",
        "As a guitarist, I need to transpose songs to match my vocal range without re-uploading the song",
        "As a capo user, I need to indicate capo position so chord diagrams display correctly for my playing",
        "As a user, I need to toggle chord visibility so I can practice lyrics-only or with chord reference"
      ],
      "designPriorities": [
        "Quick access",
        "Clear controls",
        "Immediate preview",
        "Settings persistence"
      ],
      "focusAreas": [
        "Font size slider with 50%-150% range and live preview",
        "Transpose control with -12 to +12 semitone range and key preview",
        "Capo selector (0-12 frets) with chord diagram updates",
        "Chord display mode toggle (Off, Names, Diagrams)",
        "Settings presets for common configurations (planned Sprint 4)",
        "High contrast mode toggle (planned Sprint 3)",
        "Slide-in animation from left with 384px width"
      ],
      "avoidAreas": [
        "Settings changes requiring page reload or re-analysis",
        "Complex nested settings menus requiring multiple clicks",
        "Settings without immediate visual feedback",
        "Auto-apply settings without user confirmation"
      ],
      "acceptanceCriteria": [
        "Settings panel opens in under 300ms with smooth slide animation",
        "Font size changes apply instantly to teleprompter view",
        "Transpose updates all chords within 500ms",
        "Capo selection updates chord diagrams immediately",
        "Settings persist to localStorage on change",
        "Close button and Esc key both dismiss panel",
        "All controls keyboard accessible with Tab navigation"
      ],
      "status": "active"
    },
    "Header": {
      "purpose": "Primary navigation bar providing access to settings, upload, demo mode, and current song information",
      "userStories": [
        "As a user, I need quick access to settings from any view so I can adjust preferences without losing context",
        "As a performer, I need to see the current song title at a glance so I know which song is loaded",
        "As a new user, I need a demo button to explore features without uploading my own content",
        "As a user, I need an upload button always visible so I can add new songs at any time"
      ],
      "designPriorities": [
        "Persistent visibility",
        "Clear navigation",
        "Context awareness",
        "Action accessibility"
      ],
      "focusAreas": [
        "Settings button (gear icon) with cyan background on left side",
        "Upload Song button with clear label and icon",
        "Demo button for quick feature exploration",
        "Centered song title and artist display with truncation for long names",
        "Consistent height (60-80px) across all viewports",
        "Responsive layout collapsing gracefully on smaller screens",
        "Fixed position at top of viewport"
      ],
      "avoidAreas": [
        "Auto-hiding header that requires scrolling to access",
        "Cluttered button layouts with unclear priorities",
        "Song title overflow without truncation or tooltip",
        "Inconsistent button sizing or spacing"
      ],
      "acceptanceCriteria": [
        "Header visible at all times regardless of scroll position",
        "Settings button opens panel in under 300ms",
        "Song title truncates with ellipsis after 40 characters with full text on hover",
        "Upload button triggers file picker immediately on click",
        "Demo button loads Yesterday demo song in under 2 seconds",
        "All buttons minimum 44x44px touch target size",
        "Keyboard accessible with Tab navigation and Enter activation"
      ],
      "status": "active"
    },
    "ChordDiagram": {
      "purpose": "Visual guitar chord diagram showing finger positions on fretboard for chord reference during performance",
      "userStories": [
        "As a guitarist, I need to see finger positions for unfamiliar chords so I can play along accurately",
        "As a learner, I need clear fretboard visualization so I understand where to place my fingers",
        "As a performer, I need chord diagrams sized appropriately so they don't distract from lyrics",
        "As a user, I need chord name labels so I can identify which chord the diagram represents"
      ],
      "designPriorities": [
        "Visual clarity",
        "Accurate positioning",
        "Appropriate sizing",
        "Quick recognition"
      ],
      "focusAreas": [
        "Fretboard grid with 6 strings and 4-5 frets visible",
        "Finger position dots with clear contrast against fretboard",
        "Open string indicators (O) and muted string indicators (X) above nut",
        "Chord name label positioned above diagram",
        "Barre chord visualization with curved line connecting positions",
        "Responsive sizing relative to lyric font size",
        "Optional finger numbers (1-4) inside position dots"
      ],
      "avoidAreas": [
        "Overly complex diagrams with advanced notation (palm muting, harmonics)",
        "Diagrams larger than necessary that compete with lyrics",
        "Color coding that relies on hue alone (accessibility issue)",
        "Animated diagrams that distract during performance"
      ],
      "acceptanceCriteria": [
        "Diagram renders in under 100ms when chord changes",
        "Finger positions clearly visible from 6ft distance",
        "Contrast ratio of 4.5:1 minimum between dots and background",
        "Chord name label matches transposed key accurately",
        "Barre chords indicated with connecting line across frets",
        "Diagram width scales to 80% of chord name text size",
        "SVG-based for crisp rendering at any zoom level"
      ],
      "status": "active"
    },
    "UploadFlow": {
      "purpose": "Multi-step interface guiding users through audio file upload, analysis progress, and Song Map generation",
      "userStories": [
        "As a user, I need to upload audio files via drag-and-drop or file picker so I can add songs quickly",
        "As a user, I need to see analysis progress in real-time so I know how long to wait",
        "As a user, I need clear error messages if upload fails so I can troubleshoot issues",
        "As a user, I need to be notified when analysis completes so I can start performing immediately"
      ],
      "designPriorities": [
        "Clear progress feedback",
        "Error handling",
        "File validation",
        "Seamless transition"
      ],
      "focusAreas": [
        "Drag-and-drop zone with hover state and visual feedback",
        "File type validation (WAV, MP3, M4A, FLAC) with error messaging",
        "Progress bar showing analysis stages (Upload, Stem Separation, Lyrics, Chords)",
        "Estimated time remaining based on file size",
        "Cancel button for long-running analysis",
        "Success state with automatic navigation to song view",
        "Error state with retry option and support link"
      ],
      "avoidAreas": [
        "Silent failures without user notification",
        "Progress indicators without stage breakdown",
        "Auto-navigation before user is ready to view song",
        "File size limits without clear communication"
      ],
      "acceptanceCriteria": [
        "Drag-and-drop zone accepts files with visual highlight on hover",
        "File validation rejects unsupported formats with clear error message",
        "Progress bar updates every 2 seconds during analysis",
        "Analysis completes in under 30 seconds for 3-minute song",
        "Success notification appears with Continue to Song button",
        "Cancel button stops analysis and returns to previous view",
        "Error messages include retry button and error code for support"
      ],
      "status": "active"
    },
    "AudioControlBar": {
      "purpose": "Consolidated audio controls container housing AudioPlayer and StemSelector in a unified interface above lyrics",
      "userStories": [
        "As a performer, I need all audio controls in one location so I can manage playback without searching",
        "As a rehearsal musician, I need quick access to both playback and stem selection so I can switch modes efficiently",
        "As a user, I need the control bar to be unobtrusive so it doesn't block lyrics during performance",
        "As a user, I need the control bar to remain accessible when scrolling so I can pause at any time"
      ],
      "designPriorities": [
        "Unified control location",
        "Minimal footprint",
        "Persistent accessibility",
        "Visual hierarchy"
      ],
      "focusAreas": [
        "Fixed height (120-180px) with responsive adjustment",
        "Gray-900 background with subtle bottom border for separation",
        "Horizontal layout with StemSelector on left, AudioPlayer on right",
        "Sticky positioning at top of teleprompter view",
        "Collapsible option for full-screen performance mode",
        "Smooth show/hide animation on user interaction",
        "Touch-friendly spacing between controls"
      ],
      "avoidAreas": [
        "Overlapping lyrics text during auto-scroll",
        "Auto-hiding that requires precise mouse positioning to reveal",
        "Controls that rearrange based on viewport size causing confusion",
        "Excessive visual styling that draws attention away from lyrics"
      ],
      "acceptanceCriteria": [
        "Control bar height between 120-180px based on content",
        "Sticky positioning maintains visibility during scroll",
        "Controls remain interactive with minimum 44x44px touch targets",
        "Show/hide animation completes in under 300ms",
        "Keyboard shortcut (Cmd+H) toggles visibility instantly",
        "Bar collapses gracefully on narrow viewports (under 768px)",
        "Visual separation from lyrics with 1px border and 16px padding"
      ],
      "status": "active"
    },
    "EmergencyFontAdjust": {
      "purpose": "Quick gesture-based font size adjustment during live performance for emergency readability fixes",
      "userStories": [
        "As a live performer, I need to increase font size mid-song if I can't read lyrics so I don't forget lines",
        "As a user in bright stage lighting, I need quick contrast adjustment so I can see lyrics without stopping",
        "As a performer, I need font adjustments that don't interrupt playback so I can fix issues seamlessly",
        "As a user, I need gesture controls that don't conflict with other interactions so I don't trigger them accidentally"
      ],
      "designPriorities": [
        "Instant response",
        "Non-disruptive interaction",
        "Clear visual feedback",
        "Fail-safe design"
      ],
      "focusAreas": [
        "Double-tap gesture on teleprompter to increase font 10%",
        "Two-finger pinch gesture for precise sizing (mobile)",
        "Keyboard shortcut (Cmd+↑/↓) for 10% increments",
        "Visual feedback overlay showing new font size percentage",
        "Maximum font size limit (150%) to prevent layout breaks",
        "Temporary feedback that fades after 1 second",
        "No confirmation required for quick adjustments"
      ],
      "avoidAreas": [
        "Gestures that conflict with scroll or selection interactions",
        "Modal dialogs requiring confirmation that interrupt performance",
        "Font changes that cause layout reflow and lose scroll position",
        "Overly sensitive gesture detection causing accidental triggers"
      ],
      "acceptanceCriteria": [
        "Double-tap increases font by 10% within 100ms",
        "Pinch gesture adjusts font with 1:1 tracking of finger movement",
        "Keyboard shortcut responds with zero perceptible delay",
        "Visual feedback overlay appears for 1 second then fades smoothly",
        "Font size capped at 150% (6rem) with user notification",
        "Gesture detection requires minimum 100ms between taps to prevent accidental triggers",
        "Layout maintains scroll position after font size change"
      ],
      "status": "planned"
    },
    "KeyboardShortcuts": {
      "purpose": "Comprehensive keyboard navigation system for hands-free control during performance and efficient editing",
      "userStories": [
        "As a performer, I need to control playback without touching the mouse so I can keep my hands on my instrument",
        "As a power user, I need keyboard shortcuts for common actions so I can work more efficiently",
        "As an accessibility user, I need full keyboard navigation so I can use the app without a mouse",
        "As a user, I need discoverable shortcuts with visual hints so I can learn them over time"
      ],
      "designPriorities": [
        "Full coverage of primary actions",
        "Standard shortcut conventions",
        "Visual discoverability",
        "No conflicts with browser shortcuts"
      ],
      "focusAreas": [
        "8 primary shortcuts (Space, ←/→, Cmd+comma, Cmd+L, Cmd+E, Esc, Tab, Cmd+↑/↓)",
        "Shortcut hint overlay (Cmd+/ to toggle visibility)",
        "Visual indicators on buttons showing keyboard shortcuts",
        "Context-aware shortcuts (different actions in teleprompter vs edit mode)",
        "Focus management ensuring shortcuts reach correct component",
        "Modifier key support (Cmd/Ctrl, Shift, Alt) for advanced actions",
        "Shortcut customization in settings (future enhancement)"
      ],
      "avoidAreas": [
        "Shortcuts that conflict with browser or OS-level commands",
        "Hidden shortcuts with no visual documentation",
        "Context-free shortcuts that behave unpredictably",
        "Single-key shortcuts that conflict with text input"
      ],
      "acceptanceCriteria": [
        "All 8 primary shortcuts respond within 50ms",
        "Cmd+/ toggles shortcut overlay with complete list in under 200ms",
        "Visual indicators appear on hover for all shortcut-enabled buttons",
        "Shortcuts respect focus context (work in correct component)",
        "No conflicts with browser shortcuts (Cmd+T, Cmd+W, etc.)",
        "Shortcut overlay dismisses with Esc or click outside",
        "Screen reader announces shortcut availability on button focus"
      ],
      "status": "planned"
    },
    "HighContrastMode": {
      "purpose": "Accessibility mode providing maximum contrast color scheme for users with visual impairments or bright stage lighting",
      "userStories": [
        "As a user with low vision, I need maximum contrast so I can read lyrics clearly",
        "As a performer in bright stage lighting, I need high contrast mode so glare doesn't wash out the display",
        "As a user sensitive to light, I need to toggle between normal and high contrast so I can adapt to different environments",
        "As an accessibility user, I need high contrast to persist across sessions so I don't have to re-enable it"
      ],
      "designPriorities": [
        "WCAG AAA compliance",
        "User preference persistence",
        "Clear toggle control",
        "Consistent styling"
      ],
      "focusAreas": [
        "Pure black background (rgb(0, 0, 0)) for maximum contrast",
        "Pure white text (rgb(255, 255, 255)) for lyrics and primary content",
        "Yellow highlights (rgb(255, 255, 0)) for active syllables",
        "Bold weight increase for all text elements",
        "Thicker borders (3px vs 1px) for UI elements",
        "Toggle control in Settings panel with icon indicator",
        "Respects prefers-contrast: high media query for auto-enable"
      ],
      "avoidAreas": [
        "Subtle color variations that reduce contrast",
        "Gradient backgrounds that introduce mid-tones",
        "Thin fonts or stroke weights that reduce legibility",
        "Auto-switching based on time of day without user control"
      ],
      "acceptanceCriteria": [
        "Text contrast ratio of 21:1 (maximum) for all content",
        "Toggle switch in Settings labeled High Contrast Mode",
        "Mode persists to localStorage and applies on app load",
        "All UI elements maintain 7:1 minimum contrast in high contrast mode",
        "Icon indicator in header shows when high contrast is active",
        "Transition to high contrast completes in under 200ms",
        "Respects system preference if set before manual toggle"
      ],
      "status": "planned"
    }
  },
  "globalConstraints": {
    "accessibility": [
      "WCAG 2.1 AA minimum compliance, AAA for critical elements (lyrics, chords)",
      "Keyboard navigation for all interactive elements with visible focus indicators (2px cyan outline)",
      "Screen reader support with semantic HTML and ARIA labels on all components",
      "ARIA live regions for dynamic content updates (playback state, section changes)",
      "Minimum touch target size 44x44px for all interactive elements",
      "High contrast mode available for users with low vision",
      "Reduced motion support respecting prefers-reduced-motion media query",
      "Alternative text for all non-decorative images and icons",
      "Color not used as sole indicator of meaning (supplemented with icons/text)"
    ],
    "performance": [
      "60fps sustained rendering during teleprompter scrolling and syllable highlighting",
      "Under 100ms perceived interaction time for all user actions",
      "Audio latency under 50ms from playback control to sound output",
      "Analysis completes in under 30 seconds per 3-minute song",
      "Settings changes apply instantly without page reload (under 2 seconds)",
      "Song search results return in under 100ms for local library (up to 1000 songs)",
      "First meaningful paint under 1.5 seconds on 3G connection",
      "Lighthouse performance score 90+ for production build",
      "Virtual scrolling for large song lists (over 100 items)",
      "Debounced user input (200ms) for search and filter operations"
    ],
    "browser": [
      "Chrome 90+ (primary target)",
      "Safari 14+ (macOS and iOS)",
      "Firefox 88+",
      "Edge 90+",
      "Desktop: Windows 10+, macOS 11+, Ubuntu 20.04+",
      "Minimum viewport: 1024x768 (desktop), 375x667 (mobile future support)",
      "Web Audio API required for audio playback and stem mixing",
      "localStorage for preferences and library metadata",
      "No IE11 support (uses modern ES6+ features)"
    ],
    "design": [
      "Performance-first design philosophy: UI disappears during performance",
      "Dark theme optimized for stage environments (near-black backgrounds)",
      "Performia cyan (rgb(6, 182, 212)) as primary accent color",
      "Typography scale: 3.5rem default lyrics, 2.8rem chords, 1.125rem UI body text",
      "Spacing system: 4px, 8px, 16px, 24px, 32px, 48px increments",
      "Border radius: 4px (small), 8px (medium), 12px (large), 16px (extra-large)",
      "Shadow system using rgba with multiple elevations for depth",
      "Progressive disclosure: complexity hidden until needed",
      "Musician mental model: sections, keys, chords as primary navigation concepts",
      "Consistent component styling with Tailwind CSS utility classes"
    ]
  },
  "originalPRD": "# 🎵 Performia - Complete Documentation\n\n**Version:** 3.0\n**Last Updated:** October 1, 2025\n**Status:** Living Document\n\n---\n\n## 📖 Table of Contents\n\n### Quick Navigation\n- [🎯 Product Overview](#-product-overview)\n- [🚀 Quick Start](#-quick-start)\n- [🏗️ Architecture](#️-architecture)\n- [🎨 Design System](#-design-system)\n- [🧩 Component Library](#-component-library)\n- [📋 Feature Status](#-feature-status)\n- [🗺️ Roadmap](#️-roadmap)\n- [🔧 Developer Guide](#-developer-guide)\n- [♿ Accessibility](#-accessibility)\n- [📊 Success Metrics](#-success-metrics)\n\n---\n\n## 🎯 Product Overview\n\n### What is Performia?\n\n**Performia** is a revolutionary music performance system that transforms how musicians perform live. By combining real-time audio analysis, AI-powered audio processing, and an intelligent \"Living Chart\" teleprompter, Performia enables musicians to focus on their artistry.\n\n**Core Value Proposition:**\n*\"Never forget lyrics or chords again. Performia follows YOU in real-time.\"*\n\n### Target Users\n\n1. **Live Performers** (Primary)\n   - Vocalists, guitarists, bands\n   - Perform 3-4 gigs per week\n   - Need large fonts readable from 6ft away\n   - Zero distractions during performance\n\n2. **Rehearsal Musicians** (Secondary)\n   - Learning new songs\n   - Need to edit chords and structure\n   - Practice with isolated stems\n\n3. **Casual Hobbyists** (Tertiary)\n   - Home practice\n   - Need simple, intuitive interface\n   - Explore demo songs\n\n### Design Philosophy\n\n> **\"The best interface for performance is no interface at all.\"**\n\n**Core Principles:**\n1. **Performance-First**: UI disappears during performance\n2. **Zero-Latency Feel**: <100ms perceived interaction time\n3. **Musician Mental Model**: Sections, keys, chords\n4. **Progressive Disclosure**: Complexity hidden until needed\n5. **Accessibility by Default**: Works for all musicians\n\n---\n\n## 🚀 Quick Start\n\n### Running Performia\n\n#### Backend (Python + C++)\n```bash\ncd backend\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements.txt\npython src/main.py\n```\n\nBackend runs on: `http://localhost:8000`\n\n#### Frontend (React + Vite)\n```bash\ncd frontend\nnpm install\nnpm run dev\n```\n\nFrontend runs on: `http://localhost:5001`\n\n### First-Time User Flow\n\n1. **Open Performia** → Demo song \"Yesterday\" loads automatically\n2. **Click Settings** (gear icon) → Adjust font size, transpose\n3. **Click Play** → Watch syllables highlight in real-time\n4. **Upload Song** → Drop audio file, wait ~30s for analysis\n5. **Perform** → Fullscreen lyrics with chords, zero distractions\n\n---\n\n## 🏗️ Architecture\n\n### Tech Stack\n\n**Frontend:**\n- React 19 + TypeScript 5\n- Vite 6 (build tool)\n- Tailwind CSS 4 (styling)\n- React hooks (state management)\n\n**Backend:**\n- Python 3.11 + FastAPI\n- JUCE (C++ audio engine)\n- Librosa (audio analysis)\n- Demucs (stem separation)\n- Whisper (speech recognition / ASR)\n- **SongPrep** (planned - song structure parsing)\n\n### Data Flow\n\n```\n1. Upload Audio → Backend\n2. Analysis Pipeline → Song Map JSON\n3. Frontend → Display Living Chart\n4. Audio Playback → Syllable Sync\n```\n\n### Song Map Schema\n\n```json\n{\n  \"title\": \"Song Title\",\n  \"artist\": \"Artist Name\",\n  \"key\": \"C Major\",\n  \"bpm\": 120,\n  \"sections\": [\n    {\n      \"name\": \"Verse 1\",\n      \"lines\": [\n        {\n          \"syllables\": [\n            {\n              \"text\": \"Hello\",\n              \"startTime\": 0.5,\n              \"duration\": 0.3,\n              \"chord\": \"C\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n### API Endpoints\n\n| Endpoint | Method | Purpose |\n|----------|--------|---------|\n| `/upload` | POST | Upload audio file |\n| `/progress/:jobId` | GET | Analysis progress |\n| `/songmap/:jobId` | GET | Get Song Map JSON |\n| `/audio/:jobId/original` | GET | Get original audio |\n| `/audio/:jobId/stem/:type` | GET | Get stem (vocals, bass, drums, other) |\n\n---\n\n## 🎨 Design System\n\n### Color Palette\n\n#### Performance Mode (Stage)\n```css\n--bg-performance: rgb(10, 10, 12)      /* Near-black, minimal glare */\n--text-lyrics: rgb(240, 240, 245)      /* Cool white, max legibility */\n--chord-inactive: #FACC15              /* Warm amber (WCAG AAA) */\n--chord-active: #06b6d4                /* Performia cyan */\n--highlight-sung: rgba(6, 182, 212, 0.3)  /* Cyan glow */\n```\n\n#### UI Chrome (Controls)\n```css\n--bg-chrome: #111827                   /* Gray-900 */\n--bg-panel: #1f2937                    /* Gray-800 */\n--bg-input: #374151                    /* Gray-700 */\n--accent-primary: #06b6d4              /* Performia cyan */\n--accent-hover: #06d4f1                /* Lighter cyan */\n--accent-success: #22c55e              /* Green */\n--accent-warning: #eab308              /* Yellow */\n--accent-error: #ef4444                /* Red */\n```\n\n### Typography Scale\n\n```css\n/* Teleprompter (Performance) */\n--font-lyrics-default: 3.5rem   /* 56px - Stage optimized */\n--font-lyrics-min: 2.5rem       /* 40px */\n--font-lyrics-max: 6.0rem       /* 96px */\n--font-chord: 2.8rem            /* 45px - 80% ratio maintained */\n\n/* UI Chrome */\n--font-header-1: 2.5rem         /* Song title */\n--font-header-2: 1.875rem       /* Artist */\n--font-body: 1.125rem           /* Editable text */\n--font-control: 1rem            /* Buttons */\n--font-label: 0.875rem          /* Labels */\n--font-caption: 0.75rem         /* Metadata */\n```\n\n### Spacing System\n\n```css\n--space-xs:   4px\n--space-sm:   8px\n--space-md:   16px\n--space-lg:   24px\n--space-xl:   32px\n--space-2xl:  48px\n```\n\n### Border Radius\n\n```css\n--radius-sm:  4px\n--radius-md:  8px\n--radius-lg:  12px\n--radius-xl:  16px\n--radius-full: 9999px  /* Pill shape */\n```\n\n### Shadows\n\n```css\n--shadow-sm: 0 1px 2px rgba(0,0,0,0.05)\n--shadow-md: 0 4px 6px rgba(0,0,0,0.1)\n--shadow-lg: 0 10px 15px rgba(0,0,0,0.1)\n--shadow-xl: 0 20px 25px rgba(0,0,0,0.1)\n--shadow-cyan: 0 10px 15px rgba(6,182,212,0.2)\n```\n\n---\n\n## 🧩 Component Library\n\n### Core Components\n\n#### 1. TeleprompterView (Living Chart)\n**File:** `frontend/components/TeleprompterView.tsx`\n\n**Purpose:** Fullscreen lyrics with real-time syllable highlighting\n\n**Features:**\n- Real-time syllable highlighting\n- Auto-scroll (active line centered)\n- Chord display (names or diagrams)\n- Audio controls integration\n- Font size control (50%-150%)\n\n**Layout:**\n```\n┌─────────────────────────────────────┐\n│ [Audio Controls Bar]                │  ← 120-180px height\n├─────────────────────────────────────┤\n│                                     │\n│    Past lyrics (30% opacity)        │\n│                                     │\n│  ╔═══════════════════════════════╗ │\n│  ║   C              G            ║ │  ← Active line\n│  ║   Here comes the sun ◆ doo   ║ │  ← ◆ = current syllable\n│  ╚═══════════════════════════════╝ │\n│                                     │\n│    Future lyrics (100% opacity)     │\n│                                     │\n└─────────────────────────────────────┘\n```\n\n**Props:**\n```typescript\ninterface TeleprompterViewProps {\n  songMap: SongMap;\n  transpose: number;\n  capo: number;\n  chordDisplay: 'off' | 'names' | 'diagrams';\n  jobId?: string;\n}\n```\n\n---\n\n#### 2. AudioPlayer ✨ NEW\n**File:** `frontend/components/AudioPlayer.tsx`\n\n**Purpose:** Full-featured audio player with playback controls\n\n**Features:**\n- Play/pause button\n- Progress bar (draggable seek)\n- Volume control (slider + mute)\n- Time display (MM:SS / MM:SS)\n- Real-time sync with lyrics\n\n**UI Elements:**\n- **Progress Bar:** Cyan fill, gray background, draggable\n- **Play/Pause:** Cyan button, black text, icons ▶ ⏸\n- **Volume:** Slider (0.0-1.0), mute button 🔇 🔉 🔊\n- **Time:** Monospace font, white text\n\n**Container:** Gray-800 background, 16px padding, 8px radius\n\n**Props:**\n```typescript\ninterface AudioPlayerProps {\n  audioUrl: string;\n  onTimeUpdate: (currentTime: number) => void;\n  onDurationChange?: (duration: number) => void;\n  onPlayStateChange?: (isPlaying: boolean) => void;\n}\n```\n\n---\n\n#### 3. StemSelector ✨ NEW\n**File:** `frontend/components/StemSelector.tsx`\n\n**Purpose:** Toggle between audio stems (vocals, drums, bass, etc.)\n\n**Features:**\n- 5 stem types: Full Mix, Vocals, Bass, Drums, Other\n- Loading states (spinner icon)\n- Availability check (HEAD request)\n- Active state highlighting\n\n**Button States:**\n- **Selected:** Cyan background, black text, scale 105%, play icon ▶\n- **Unselected:** Gray-700 background, white text, hover gray-600\n- **Loading:** 50% opacity, spinning clock ⌛\n- **Unavailable:** 60% opacity, grayed out\n\n**Props:**\n```typescript\ninterface StemSelectorProps {\n  jobId: string;\n  baseUrl?: string;\n  onStemChange: (stemUrl: string, stemType: StemType) => void;\n}\n\ntype StemType = 'original' | 'vocals' | 'bass' | 'drums' | 'other';\n```\n\n---\n\n#### 4. Full Chart (Song Editor)\n**File:** `frontend/components/BlueprintView.tsx`\n\n**Purpose:** Document-style editor for song structure and chords\n\n**Features:**\n- Inline editing (click to edit)\n- Edit title, artist, lyrics, chords\n- Section headers (Verse, Chorus, etc.)\n- Chord autocomplete (planned Sprint 4)\n- Drag-to-reorder sections (planned Sprint 4)\n\n**Layout:**\n```\n┌─────────────────────────────────────┐\n│  Song Title (editable)              │\n│  Artist Name (editable)             │\n│  Key: C Major | BPM: 120            │\n├─────────────────────────────────────┤\n│  ┌─ [ Verse 1 ] ─────────────────┐ │\n│  │  C            G                │ │\n│  │  Here comes the sun           │ │\n│  └────────────────────────────────┘ │\n│                                     │\n│  ┌─ [ Chorus ] ──────── [⋮] ─────┐ │  ← Drag handle\n│  │  ...                           │ │\n│  └────────────────────────────────┘ │\n│                                     │\n│  [+ Add Section]                    │\n└─────────────────────────────────────┘\n```\n\n---\n\n#### 5. LibraryView\n**File:** `frontend/components/LibraryView.tsx`\n\n**Purpose:** Song search and library management\n\n**Features:**\n- Instant search (title, artist, lyrics, tags)\n- Filter by genre, key, BPM, difficulty\n- Sort by title, date added, last played\n- Quick actions: Play, Edit, Delete\n- Song cards with metadata\n\n**Search:** Fuzzy matching, autocomplete (planned Sprint 4)\n\n---\n\n#### 6. SettingsPanel\n**File:** `frontend/components/SettingsPanel.tsx`\n\n**Purpose:** Quick access to performance controls\n\n**Features:**\n- Chord display mode (Off, Names, Diagrams)\n- Font size slider (50%-150%)\n- Transpose (-12 to +12)\n- Capo (0-12 frets)\n- Settings presets (planned Sprint 4)\n- High contrast mode (planned Sprint 3)\n\n**Layout:** Slide-in from left, 384px width\n\n---\n\n#### 7. Header\n**File:** `frontend/components/Header.tsx`\n\n**Elements:**\n- Settings button (gear icon, cyan background)\n- Upload Song button\n- Demo button\n- Song title/artist display (center)\n\n---\n\n#### 8. ChordDiagram\n**File:** `frontend/components/ChordDiagram.tsx`\n\n**Purpose:** Guitar chord visualization\n\n**Elements:**\n- Fretboard grid\n- Finger positions\n- Chord name label\n\n---\n\n### Component Hierarchy\n\n```\nApp (State Manager)\n├── Header\n│   ├── Settings Button → Opens SettingsPanel\n│   ├── Upload Button → Triggers upload flow\n│   └── Song Title (center)\n│\n├── Main Content (View-Switched)\n│   ├── TeleprompterView (Performance Mode)\n│   │   ├── Audio Controls Bar ✨ NEW\n│   │   │   ├── StemSelector ✨ NEW\n│   │   │   └── AudioPlayer ✨ NEW\n│   │   └── Lyrics Display (Living Chart)\n│   │\n│   ├── Full Chart (Edit Mode)\n│   └── SongMapDemo\n│\n├── Footer\n│\n└── SettingsPanel (Modal)\n    └── LibraryView\n```\n\n---\n\n## 📋 Feature Status\n\n### ✅ Complete (Sprint 1-2)\n\n| Feature | Component | Status |\n|---------|-----------|--------|\n| **Teleprompter display** | TeleprompterView | ✅ Complete |\n| **Syllable highlighting** | TeleprompterView | ✅ Complete |\n| **Auto-scroll** | TeleprompterView | ✅ Complete |\n| **Chord display** | TeleprompterView | ✅ Complete |\n| **Audio playback** | AudioPlayer | ✅ Complete |\n| **Stem selection** | StemSelector | ✅ Complete |\n| **Progress bar** | AudioPlayer | ✅ Complete |\n| **Volume control** | AudioPlayer | ✅ Complete |\n| **Song Map generation** | Backend | ✅ Complete |\n| **Library management** | LibraryView | ✅ Complete |\n| **Settings panel** | SettingsPanel | ✅ Complete |\n| **Full Chart editor** | BlueprintView | ✅ Complete |\n\n### 🔨 In Progress\n\n| Feature | Target | Current | Sprint |\n|---------|--------|---------|--------|\n| **60fps rendering** | 60fps | 50fps | Sprint 3 |\n| **Settings speed** | <2s | ~4s | Sprint 3 |\n\n### 📋 Planned\n\n#### Sprint 3 (Oct 8-21): Performance & Accessibility\n- [ ] 60fps rendering optimization\n- [ ] Auto-center active line (50% viewport)\n- [ ] Keyboard navigation (8 shortcuts)\n- [ ] ARIA labels and semantic HTML\n- [ ] High contrast mode\n- [ ] Focus indicators\n- [ ] Reduced motion mode\n\n#### Sprint 4 (Oct 22 - Nov 4): Enhanced Editing + SongPrep Experimentation\n- [ ] Chord autocomplete popup\n- [ ] Drag-to-reorder sections\n- [ ] Real-time chord validation\n- [ ] Emergency font adjust (double-tap)\n- [ ] Library autocomplete search\n- [ ] Settings presets\n- [ ] **SongPrep Integration Research** (NEW)\n  - [ ] Clone SongPrep repository and set up environment\n  - [ ] Download 7B model weights from HuggingFace\n  - [ ] Test on 10 sample songs\n  - [ ] Benchmark inference speed and accuracy\n  - [ ] Compare section detection vs current heuristics\n  - [ ] Assess GPU requirements and resource impact\n  - [ ] Document findings and integration recommendations\n\n#### Sprint 5 (Nov 5-18): Polish & Testing + SongPrep Integration\n- [ ] Micro-interactions and animations\n- [ ] Loading states (skeleton screens)\n- [ ] User testing\n- [ ] Bug fixes and polish\n- [ ] **SongPrep Integration** (if Sprint 4 experiments successful)\n  - [ ] Create `backend/src/services/songprep/` module\n  - [ ] Implement parser for SongPrep output → Song Map format\n  - [ ] Update orchestrator for parallel processing\n  - [ ] Add confidence scoring to sections\n  - [ ] E2E testing: Audio → SongPrep → Living Chart\n  - [ ] Performance optimization (GPU, caching)\n\n### 🔮 Future (Post-MVP)\n\n- **Phase 2 (Q1 2026):** Setlist management, mobile support, SongPrep fine-tuning\n- **Phase 3 (Q2 2026):** Collaborative editing, cloud sync, genre-specific structure models\n- **Phase 4 (Q3 2026):** AI accompaniment (drums, bass, keys)\n- **Phase 5 (Q4 2026):** Voice commands, custom training datasets\n\n---\n\n## 🗺️ Roadmap\n\n### MVP Timeline\n\n| Sprint | Dates | Theme | Deliverables |\n|--------|-------|-------|--------------|\n| **1-2** | ✅ Complete | Backend + Audio | Analysis pipeline, audio playback, stems |\n| **3** | Oct 8-21 | Performance + A11y | 60fps, keyboard nav, ARIA, high contrast |\n| **4** | Oct 22-Nov 4 | Enhanced Editing | Chord autocomplete, drag sections, emergency font |\n| **5** | Nov 5-18 | Polish + Testing | Animations, loading states, user testing |\n| **MVP** | Nov 22 | Launch | Feature complete, accessible, bug-free |\n\n### Sprint 3 Breakdown (Oct 8-21)\n\n**Week 1: Performance**\n1. Optimize TeleprompterView rendering (virtual scrolling)\n2. Add syllable pulse animation\n3. Implement auto-centering (50% viewport)\n\n**Week 2: Accessibility**\n1. Keyboard navigation (8 shortcuts)\n2. ARIA labels on all elements\n3. High contrast mode\n4. Focus indicators\n\n**Acceptance Criteria:**\n- [ ] 60fps sustained for 10-min song\n- [ ] All elements keyboard accessible\n- [ ] WCAG AAA contrast ratios\n- [ ] Lighthouse accessibility score: 95+\n\n---\n\n## 🔧 Developer Guide\n\n### Project Structure\n\n```\nPerformia/\n├── frontend/                  # React frontend\n│   ├── components/           # React components\n│   ├── services/             # Library service, etc.\n│   ├── hooks/                # Custom hooks\n│   ├── data/                 # Mock data\n│   ├── types.ts              # TypeScript definitions\n│   └── index.css             # Global styles\n│\n├── backend/                   # Python backend\n│   ├── src/\n│   │   ├── main.py           # FastAPI server\n│   │   ├── services/         # Audio analysis\n│   │   └── schemas/          # JSON schemas\n│   └── requirements.txt\n│\n└── PERFORMIA_MASTER_DOCS.md  # This file\n```\n\n### Development Workflow\n\n1. **Start Backend:**\n   ```bash\n   cd backend\n   python src/main.py\n   ```\n\n2. **Start Frontend:**\n   ```bash\n   cd frontend\n   npm run dev\n   ```\n\n3. **Make Changes:**\n   - Hot reload enabled (Vite)\n   - Backend restarts on file change\n\n4. **Test:**\n   ```bash\n   # Frontend\n   npm test\n\n   # Backend\n   pytest\n   ```\n\n5. **Commit:**\n   ```bash\n   git add .\n   git commit -m \"feat: description\"\n   git push\n   ```\n\n### Key Files to Know\n\n| File | Purpose |\n|------|---------|\n| `frontend/App.tsx` | Main app component, state management |\n| `frontend/components/TeleprompterView.tsx` | Living Chart display |\n| `frontend/components/AudioPlayer.tsx` | Audio playback controls |\n| `frontend/types.ts` | TypeScript type definitions |\n| `backend/src/main.py` | FastAPI server, routes |\n| `backend/schemas/song_map.schema.json` | Song Map structure |\n\n### Adding a New Component\n\n1. Create file in `frontend/components/`\n2. Define TypeScript interface for props\n3. Implement component with accessibility (ARIA labels)\n4. Add to parent component\n5. Update this documentation\n\n### Debugging Tips\n\n**Frontend:**\n- React DevTools for component tree\n- Console.log sparingly (use breakpoints)\n- Check Network tab for API calls\n\n**Backend:**\n- FastAPI auto-docs: `http://localhost:8000/docs`\n- Check logs for errors\n- Use Python debugger (pdb)\n\n**Performance:**\n- Chrome DevTools Performance tab\n- Target: 60fps (16.67ms per frame)\n- Check for layout thrashing\n\n---\n\n## ♿ Accessibility\n\n### WCAG Compliance\n\n**Target:** WCAG 2.1 AA minimum, AAA for critical elements\n\n### Contrast Ratios\n\n| Element | Ratio | Standard |\n|---------|-------|----------|\n| Lyrics | 16:1 | AAA |\n| Chords | 7:1 | AAA |\n| UI Controls | 4.5:1 | AA |\n\n### Keyboard Navigation\n\n| Key | Action | Context |\n|-----|--------|---------|\n| **Space** | Play/pause | Teleprompter |\n| **←/→** | Prev/next section | Teleprompter |\n| **Cmd+,** | Open settings | Global |\n| **Cmd+L** | Open library | Global |\n| **Cmd+E** | Toggle edit mode | Global |\n| **Esc** | Close modal | Global |\n| **Tab** | Navigate controls | Settings |\n| **Cmd+↑/↓** | Font size ±10% | Teleprompter |\n\n### Screen Reader Support\n\n- Semantic HTML (`<header>`, `<main>`, `<nav>`)\n- ARIA labels on all interactive elements\n- ARIA live regions for dynamic content\n- Announce section changes and playback state\n\n### Visual Accessibility\n\n- **High contrast mode** (black-on-white toggle)\n- **Focus indicators** (2px cyan outline)\n- **Reduced motion** (disable animations)\n- **Minimum touch targets** (44x44px)\n\n### Testing Checklist\n\n- [ ] Tab through all interactive elements\n- [ ] Test with screen reader (VoiceOver/NVDA)\n- [ ] Check contrast with WCAG Color Contrast Checker\n- [ ] Test reduced motion preference\n- [ ] Verify focus indicators visible\n\n---\n\n## 📊 Success Metrics\n\n### Quantitative Targets\n\n| Metric | Target | Current | Status |\n|--------|--------|---------|--------|\n| **Time to first performance** | <30s | ✅ 25s | ✅ Met |\n| **Song search speed** | <5s | ✅ 3s | ✅ Met |\n| **Settings adjust speed** | <2s | 🔨 4s | 🔨 In progress |\n| **Frame rate** | 60fps | 🔨 50fps | 🔨 In progress |\n| **Audio latency** | <50ms | ✅ 35ms | ✅ Met |\n| **Analysis speed** | <30s/song | ✅ 22s | ✅ Met |\n| **Chord accuracy** | 90%+ | ✅ 92% | ✅ Met |\n| **Lyric accuracy** | 95%+ | ✅ 96% | ✅ Met |\n\n### Qualitative Targets\n\n- **Ease of use:** 4.5+ stars (out of 5)\n- **Feature discovery:** 80%+ without tutorial\n- **Visual clarity:** 95%+ \"easy to read\"\n- **Performance satisfaction:** 90%+ \"feels instant\"\n\n### Analytics to Track\n\n1. Time to first performance\n2. Songs uploaded per user\n3. Most used features\n4. Error rate\n5. Session duration\n6. Return rate (weekly active)\n\n---\n\n## 🔍 Frequently Asked Questions\n\n### General\n\n**Q: What audio formats are supported?**\nA: WAV, MP3, M4A, FLAC\n\n**Q: How long does song analysis take?**\nA: ~30 seconds per song (varies by length)\n\n**Q: Can I edit the auto-generated chords?**\nA: Yes, use Full Chart to edit chords inline\n\n**Q: Does it work offline?**\nA: Not yet (planned for Phase 3)\n\n### Technical\n\n**Q: Why 60fps target?**\nA: Smooth scrolling is critical for reading during performance. 60fps = 16.67ms per frame.\n\n**Q: Canvas vs DOM for rendering?**\nA: Currently DOM. Will optimize first, consider Canvas only if needed (accessibility trade-off).\n\n**Q: How does syllable sync work?**\nA: RequestAnimationFrame checks current audio time, finds matching syllable, updates highlight.\n\n**Q: Why Performia cyan?**\nA: High contrast with warm amber chords, signals \"now\", cool color stands out.\n\n---\n\n## 📝 Contribution Guidelines\n\n### Code Style\n\n- **TypeScript:** Strict mode, explicit types\n- **React:** Functional components, hooks\n- **CSS:** Tailwind utility classes, avoid inline styles\n- **Naming:** camelCase for variables, PascalCase for components\n\n### Commit Messages\n\n```\nfeat: Add emergency font adjust gesture\nfix: Resolve audio sync latency issue\ndocs: Update component API reference\nrefactor: Optimize TeleprompterView rendering\ntest: Add unit tests for chord validation\n```\n\n### Pull Requests\n\n1. Create feature branch: `git checkout -b feat/my-feature`\n2. Make changes and commit\n3. Push: `git push -u origin feat/my-feature`\n4. Open PR with description\n5. Request review\n6. Merge after approval\n\n---\n\n## 🐛 Known Issues & Limitations\n\n### Current Limitations\n\n1. **Desktop only** (mobile support in Phase 2)\n2. **Local storage** (no cloud sync yet)\n3. **No collaboration** (single user editing)\n4. **English lyrics only** (multi-language in future)\n\n### Known Bugs\n\n*None currently tracked for MVP*\n\n### Workarounds\n\n**Issue:** Font size changes lag\n**Workaround:** Use preset sizes instead of slider\n\n**Issue:** Large songs (>10min) slow down\n**Workaround:** Virtual scrolling coming in Sprint 3\n\n---\n\n## 📚 Additional Resources\n\n### External Links\n\n- [WCAG 2.1 Guidelines](https://www.w3.org/WAI/WCAG21/quickref/)\n- [React Performance](https://react.dev/learn/render-and-commit)\n- [Tailwind CSS Docs](https://tailwindcss.com/docs)\n- [FastAPI Docs](https://fastapi.tiangolo.com/)\n- **[SongPrep Repository](https://github.com/tencent-ailab/SongPrep)** - Song structure parsing\n- **[SongPrep Paper](https://arxiv.org/abs/2509.17404)** - Technical details\n\n### Internal Files\n\n- `backend/schemas/song_map.schema.json` - Song Map structure\n- `frontend/types.ts` - TypeScript definitions\n- `.claude/CLAUDE.md` - Agent SDK instructions\n- **`docs/research/SONGPREP_ANALYSIS.md`** - SongPrep integration research\n\n---\n\n## 📅 Document History\n\n| Version | Date | Changes |\n|---------|------|---------|\n| 3.0 | Oct 1, 2025 | Consolidated all docs into master file |\n| 2.0 | Oct 1, 2025 | Added AudioPlayer & StemSelector specs |\n| 1.0 | Sep 30, 2025 | Initial documentation structure |\n\n---\n\n## 🎯 Core Principle\n\n> **\"The best interface for performance is no interface at all.\"**\n\nEvery decision must answer:\n**\"Does this help the musician perform better, or does it distract?\"**\n\nIf it distracts → Cut it.\nIf it helps → Polish it until it's invisible.\n\n---\n\n**Maintained by:** Performia Development Team\n**Next Review:** End of Sprint 3 (Oct 21, 2025)\n**Questions?** Check the FAQ or open an issue\n"
}
