{
  "files": [
    {
      "path": "components/TeleprompterView.tsx",
      "type": "edit",
      "oldContent": "import React, { useEffect, useRef, useState } from 'react';\nimport { Song } from '../types';\n\ninterface TeleprompterViewProps {\n  song: Song;\n  isPlaying: boolean;\n  currentTime: number;\n  scrollSpeed: number;\n  fontSize: number;\n  autoScroll: boolean;\n}\n\ninterface ChordLine {\n  type: 'chord';\n  content: string;\n  timestamp?: number;\n}\n\ninterface LyricLine {\n  type: 'lyric';\n  content: string;\n  timestamp?: number;\n}\n\ninterface SectionHeader {\n  type: 'section';\n  content: string;\n}\n\ntype ChartLine = ChordLine | LyricLine | SectionHeader;\n\nexport default function TeleprompterView({\n  song,\n  isPlaying,\n  currentTime,\n  scrollSpeed,\n  fontSize,\n  autoScroll,\n}: TeleprompterViewProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [parsedLines, setParsedLines] = useState<ChartLine[]>([]);\n\n  // Parse chart into structured lines\n  useEffect(() => {\n    if (!song.chart) return;\n\n    const lines: ChartLine[] = [];\n    const chartLines = song.chart.split('\\n');\n\n    for (let i = 0; i < chartLines.length; i++) {\n      const line = chartLines[i];\n      const trimmedLine = line.trim();\n\n      if (!trimmedLine) continue;\n\n      // Detect section headers (e.g., [Verse], [Chorus])\n      if (trimmedLine.match(/^\\[.*\\]$/)) {\n        lines.push({ type: 'section', content: trimmedLine });\n      }\n      // Detect chord lines (contains common chord patterns)\n      else if (trimmedLine.match(/\\b[A-G][#b]?m?(aj)?[0-9]?(sus|add|dim)?[0-9]?\\b/)) {\n        lines.push({ type: 'chord', content: trimmedLine });\n      }\n      // Everything else is lyrics\n      else {\n        lines.push({ type: 'lyric', content: trimmedLine });\n      }\n    }\n\n    setParsedLines(lines);\n  }, [song.chart]);\n\n  // Auto-scroll logic\n  useEffect(() => {\n    if (!autoScroll || !isPlaying || !containerRef.current) return;\n\n    const scrollInterval = setInterval(() => {\n      if (containerRef.current) {\n        containerRef.current.scrollTop += scrollSpeed / 10;\n      }\n    }, 50);\n\n    return () => clearInterval(scrollInterval);\n  }, [autoScroll, isPlaying, scrollSpeed]);\n\n  // Render individual line with consistent spacing\n  const renderLine = (line: ChartLine, index: number) => {\n    const nextLine = parsedLines[index + 1];\n    const prevLine = parsedLines[index - 1];\n\n    // Determine spacing based on vertical rhythm system:\n    // - Chord immediately before lyric: mb-2 (0.5rem) - tight coupling\n    // - Lyric followed by chord: mb-8 (2rem) - standard pair spacing\n    // - Section headers: mb-6 (1.5rem) before content, mb-12 (3rem) after content block\n    // - Standalone lyrics: mb-8 (2rem)\n    \n    let spacingClass = 'mb-8'; // Default spacing between pairs\n\n    if (line.type === 'chord') {\n      // Chord line - tight coupling with following lyric\n      if (nextLine?.type === 'lyric') {\n        spacingClass = 'mb-2';\n      } else {\n        spacingClass = 'mb-8';\n      }\n    } else if (line.type === 'lyric') {\n      // Lyric line - standard spacing after\n      if (nextLine?.type === 'section') {\n        spacingClass = 'mb-16'; // Larger gap before new section\n      } else if (nextLine?.type === 'chord' || nextLine?.type === 'lyric') {\n        spacingClass = 'mb-8'; // Standard spacing\n      } else {\n        spacingClass = 'mb-12'; // End of content block\n      }\n    } else if (line.type === 'section') {\n      // Section header - extra space after to separate from previous content\n      spacingClass = prevLine ? 'mb-6 mt-16' : 'mb-6';\n    }\n\n    switch (line.type) {\n      case 'section':\n        return (\n          <div\n            key={index}\n            className={`${spacingClass} text-cyan-400 font-bold tracking-wider uppercase`}\n            style={{\n              fontSize: `${fontSize * 0.7}rem`,\n              lineHeight: '1.8',\n              letterSpacing: '0.1em',\n            }}\n          >\n            {line.content}\n          </div>\n        );\n\n      case 'chord':\n        return (\n          <div\n            key={index}\n            className={`${spacingClass} text-amber-400 font-mono font-semibold`}\n            style={{\n              fontSize: `${fontSize * 0.75}rem`,\n              lineHeight: '1.8',\n              letterSpacing: '0.05em',\n            }}\n          >\n            {line.content}\n          </div>\n        );\n\n      case 'lyric':\n        return (\n          <div\n            key={index}\n            className={`${spacingClass} text-white font-light`}\n            style={{\n              fontSize: `${fontSize}rem`,\n              lineHeight: '1.9',\n              letterSpacing: '0.02em',\n            }}\n          >\n            {line.content}\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"h-full overflow-y-auto bg-slate-950 px-16 py-20 scroll-smooth\"\n      style={{\n        scrollBehavior: 'smooth',\n      }}\n    >\n      <div className=\"max-w-5xl mx-auto\">\n        {/* Song title - large, prominent */}\n        <h1\n          className=\"text-white font-bold mb-16 border-b border-slate-800 pb-8\"\n          style={{\n            fontSize: `${fontSize * 1.2}rem`,\n            lineHeight: '1.6',\n            letterSpacing: '0.02em',\n          }}\n        >\n          {song.title}\n        </h1>\n\n        {/* Artist and key info */}\n        <div className=\"flex justify-between items-center mb-20 text-slate-400\">\n          <div\n            style={{\n              fontSize: `${fontSize * 0.6}rem`,\n              lineHeight: '1.8',\n            }}\n          >\n            {song.artist}\n          </div>\n          {song.key && (\n            <div\n              className=\"font-semibold text-cyan-400\"\n              style={{\n                fontSize: `${fontSize * 0.6}rem`,\n                lineHeight: '1.8',\n              }}\n            >\n              Key: {song.key}\n            </div>\n          )}\n        </div>\n\n        {/* Chart content with consistent vertical rhythm */}\n        <div className=\"leading-relaxed\">\n          {parsedLines.length > 0 ? (\n            parsedLines.map((line, index) => renderLine(line, index))\n          ) : (\n            <div\n              className=\"text-slate-500 italic\"\n              style={{\n                fontSize: `${fontSize * 0.8}rem`,\n                lineHeight: '1.9',\n              }}\n            >\n              No chart available for this song.\n            </div>\n          )}\n        </div>\n\n        {/* Bottom padding for comfortable scrolling */}\n        <div className=\"h-96\" />\n      </div>\n    </div>\n  );\n}\n",
      "newContent": "import React, { useEffect, useRef } from 'react';\nimport type { SongMap } from '../types';\n\ninterface TeleprompterViewProps {\n  songMap: SongMap | null;\n  currentTime: number;\n  autoScroll?: boolean;\n}\n\nexport default function TeleprompterView({ songMap, currentTime, autoScroll = true }: TeleprompterViewProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const activeLineRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to active line\n  useEffect(() => {\n    if (autoScroll && activeLineRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const activeLine = activeLineRef.current;\n      const containerHeight = container.clientHeight;\n      const lineTop = activeLine.offsetTop;\n      const lineHeight = activeLine.clientHeight;\n      \n      // Scroll to keep active line in the upper third of viewport for stage visibility\n      const targetScroll = lineTop - (containerHeight / 3) + (lineHeight / 2);\n      container.scrollTo({\n        top: targetScroll,\n        behavior: 'smooth'\n      });\n    }\n  }, [currentTime, autoScroll]);\n\n  if (!songMap) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-black text-white\">\n        <p className=\"text-4xl opacity-60\">No song loaded</p>\n      </div>\n    );\n  }\n\n  // Find current active section and line\n  const getCurrentSection = () => {\n    for (const section of songMap.sections) {\n      if (currentTime >= section.startTime && currentTime < section.endTime) {\n        return section;\n      }\n    }\n    return null;\n  };\n\n  const getCurrentLineIndex = (sectionStartTime: number, lines: any[]) => {\n    for (let i = 0; i < lines.length; i++) {\n      const lineTime = sectionStartTime + (lines[i].timestamp || 0);\n      const nextLineTime = i < lines.length - 1 \n        ? sectionStartTime + (lines[i + 1].timestamp || 0)\n        : Infinity;\n      \n      if (currentTime >= lineTime && currentTime < nextLineTime) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  const activeSection = getCurrentSection();\n  const activeLineIndex = activeSection \n    ? getCurrentLineIndex(activeSection.startTime, activeSection.lines)\n    : -1;\n\n  return (\n    <div \n      ref={containerRef}\n      className=\"h-full overflow-y-auto bg-black text-white scrollbar-thin scrollbar-thumb-gray-700 scrollbar-track-transparent\"\n    >\n      {/* Centered content container with max width for optimal reading */}\n      <div className=\"max-w-6xl mx-auto px-12 py-24\">\n        \n        {/* Song title - large but less prominent than lyrics */}\n        <div className=\"text-center mb-20 pb-12 border-b border-gray-800\">\n          <h1 className=\"text-5xl font-bold mb-4 text-white\">\n            {songMap.title}\n          </h1>\n          <p className=\"text-3xl text-gray-400\">\n            {songMap.artist}\n          </p>\n        </div>\n\n        {/* Sections with lyrics */}\n        <div className=\"space-y-16\">\n          {songMap.sections.map((section, sectionIndex) => {\n            const isSectionActive = activeSection?.name === section.name;\n            \n            return (\n              <div \n                key={`${section.name}-${sectionIndex}`}\n                className=\"scroll-mt-32\"\n              >\n                {/* Section label - subtle divider */}\n                <div className=\"flex items-center mb-10 gap-6\">\n                  <div className=\"h-px bg-gradient-to-r from-transparent via-gray-700 to-transparent flex-1\"></div>\n                  <h2 className=\"text-3xl font-semibold tracking-wide uppercase text-gray-500\">\n                    {section.name}\n                  </h2>\n                  <div className=\"h-px bg-gradient-to-r from-transparent via-gray-700 to-transparent flex-1\"></div>\n                </div>\n\n                {/* Lines with chords and lyrics */}\n                <div className=\"space-y-8\">\n                  {section.lines.map((line, lineIndex) => {\n                    const isLineActive = isSectionActive && lineIndex === activeLineIndex;\n                    \n                    return (\n                      <div\n                        key={lineIndex}\n                        ref={isLineActive ? activeLineRef : null}\n                        className={`transition-all duration-300 rounded-lg px-8 py-6 ${\n                          isLineActive \n                            ? 'bg-gray-900 ring-2 ring-amber-500/50 shadow-2xl shadow-amber-500/20' \n                            : 'opacity-50 hover:opacity-75'\n                        }`}\n                      >\n                        {/* Chords - prominent but distinct from lyrics */}\n                        {line.chords && line.chords.length > 0 && (\n                          <div className=\"mb-3 flex flex-wrap gap-6\">\n                            {line.chords.map((chord, chordIndex) => (\n                              <span\n                                key={chordIndex}\n                                className=\"text-[3.5rem] font-bold text-amber-400 tracking-wide leading-none\"\n                                style={{\n                                  textShadow: isLineActive ? '0 0 20px rgba(251, 191, 36, 0.5)' : 'none'\n                                }}\n                              >\n                                {chord.chord}\n                              </span>\n                            ))}\n                          </div>\n                        )}\n\n                        {/* Lyrics - MAXIMUM visibility for stage performance */}\n                        <div \n                          className=\"text-[4rem] font-medium leading-[1.9] text-white\"\n                          style={{\n                            textShadow: isLineActive ? '0 2px 8px rgba(0, 0, 0, 0.8)' : 'none',\n                            letterSpacing: '0.02em'\n                          }}\n                        >\n                          {line.lyrics || '...'}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Bottom padding for scroll comfort */}\n        <div className=\"h-96\"></div>\n      </div>\n    </div>\n  );\n}\n",
      "diff": "- import React, { useEffect, useRef, useState } from 'react';\n+ import React, { useEffect, useRef } from 'react';\n- import { Song } from '../types';\n+ import type { SongMap } from '../types';\n-   song: Song;\n+   songMap: SongMap | null;\n-   isPlaying: boolean;\n+   currentTime: number;\n-   currentTime: number;\n+   autoScroll?: boolean;\n-   scrollSpeed: number;\n+ }\n-   fontSize: number;\n-   autoScroll: boolean;\n+ export default function TeleprompterView({ songMap, currentTime, autoScroll = true }: TeleprompterViewProps) {\n- }\n+   const containerRef = useRef<HTMLDivElement>(null);\n+   const activeLineRef = useRef<HTMLDivElement>(null);\n- interface ChordLine {\n-   type: 'chord';\n+   // Auto-scroll to active line\n-   content: string;\n+   useEffect(() => {\n-   timestamp?: number;\n+     if (autoScroll && activeLineRef.current && containerRef.current) {\n- }\n+       const container = containerRef.current;\n+       const activeLine = activeLineRef.current;\n- interface LyricLine {\n+       const containerHeight = container.clientHeight;\n-   type: 'lyric';\n+       const lineTop = activeLine.offsetTop;\n-   content: string;\n+       const lineHeight = activeLine.clientHeight;\n-   timestamp?: number;\n+       \n- }\n+       // Scroll to keep active line in the upper third of viewport for stage visibility\n+       const targetScroll = lineTop - (containerHeight / 3) + (lineHeight / 2);\n- interface SectionHeader {\n+       container.scrollTo({\n-   type: 'section';\n+         top: targetScroll,\n-   content: string;\n+         behavior: 'smooth'\n- }\n+       });\n+     }\n- type ChartLine = ChordLine | LyricLine | SectionHeader;\n+   }, [currentTime, autoScroll]);\n- export default function TeleprompterView({\n+   if (!songMap) {\n-   song,\n+     return (\n-   isPlaying,\n+       <div className=\"flex items-center justify-center h-full bg-black text-white\">\n-   currentTime,\n+         <p className=\"text-4xl opacity-60\">No song loaded</p>\n-   scrollSpeed,\n+       </div>\n-   fontSize,\n+     );\n-   autoScroll,\n+   }\n- }: TeleprompterViewProps) {\n-   const containerRef = useRef<HTMLDivElement>(null);\n+   // Find current active section and line\n-   const [parsedLines, setParsedLines] = useState<ChartLine[]>([]);\n+   const getCurrentSection = () => {\n+     for (const section of songMap.sections) {\n-   // Parse chart into structured lines\n+       if (currentTime >= section.startTime && currentTime < section.endTime) {\n-   useEffect(() => {\n+         return section;\n-     if (!song.chart) return;\n+       }\n+     }\n-     const lines: ChartLine[] = [];\n+     return null;\n-     const chartLines = song.chart.split('\\n');\n+   };\n-     for (let i = 0; i < chartLines.length; i++) {\n+   const getCurrentLineIndex = (sectionStartTime: number, lines: any[]) => {\n-       const line = chartLines[i];\n+     for (let i = 0; i < lines.length; i++) {\n-       const trimmedLine = line.trim();\n+       const lineTime = sectionStartTime + (lines[i].timestamp || 0);\n+       const nextLineTime = i < lines.length - 1 \n-       if (!trimmedLine) continue;\n+         ? sectionStartTime + (lines[i + 1].timestamp || 0)\n+         : Infinity;\n-       // Detect section headers (e.g., [Verse], [Chorus])\n+       \n-       if (trimmedLine.match(/^\\[.*\\]$/)) {\n+       if (currentTime >= lineTime && currentTime < nextLineTime) {\n-         lines.push({ type: 'section', content: trimmedLine });\n+         return i;\n-       // Detect chord lines (contains common chord patterns)\n+     }\n-       else if (trimmedLine.match(/\\b[A-G][#b]?m?(aj)?[0-9]?(sus|add|dim)?[0-9]?\\b/)) {\n+     return -1;\n-         lines.push({ type: 'chord', content: trimmedLine });\n+   };\n-       }\n-       // Everything else is lyrics\n+   const activeSection = getCurrentSection();\n-       else {\n+   const activeLineIndex = activeSection \n-         lines.push({ type: 'lyric', content: trimmedLine });\n+     ? getCurrentLineIndex(activeSection.startTime, activeSection.lines)\n-       }\n+     : -1;\n-     }\n+   return (\n-     setParsedLines(lines);\n+     <div \n-   }, [song.chart]);\n+       ref={containerRef}\n+       className=\"h-full overflow-y-auto bg-black text-white scrollbar-thin scrollbar-thumb-gray-700 scrollbar-track-transparent\"\n-   // Auto-scroll logic\n+     >\n-   useEffect(() => {\n+       {/* Centered content container with max width for optimal reading */}\n-     if (!autoScroll || !isPlaying || !containerRef.current) return;\n+       <div className=\"max-w-6xl mx-auto px-12 py-24\">\n+         \n-     const scrollInterval = setInterval(() => {\n+         {/* Song title - large but less prominent than lyrics */}\n-       if (containerRef.current) {\n+         <div className=\"text-center mb-20 pb-12 border-b border-gray-800\">\n-         containerRef.current.scrollTop += scrollSpeed / 10;\n+           <h1 className=\"text-5xl font-bold mb-4 text-white\">\n-       }\n+             {songMap.title}\n-     }, 50);\n+           </h1>\n+           <p className=\"text-3xl text-gray-400\">\n-     return () => clearInterval(scrollInterval);\n+             {songMap.artist}\n-   }, [autoScroll, isPlaying, scrollSpeed]);\n+           </p>\n+         </div>\n-   // Render individual line with consistent spacing\n-   const renderLine = (line: ChartLine, index: number) => {\n+         {/* Sections with lyrics */}\n-     const nextLine = parsedLines[index + 1];\n+         <div className=\"space-y-16\">\n-     const prevLine = parsedLines[index - 1];\n+           {songMap.sections.map((section, sectionIndex) => {\n+             const isSectionActive = activeSection?.name === section.name;\n-     // Determine spacing based on vertical rhythm system:\n+             \n-     // - Chord immediately before lyric: mb-2 (0.5rem) - tight coupling\n+             return (\n-     // - Lyric followed by chord: mb-8 (2rem) - standard pair spacing\n+               <div \n-     // - Section headers: mb-6 (1.5rem) before content, mb-12 (3rem) after content block\n+                 key={`${section.name}-${sectionIndex}`}\n-     // - Standalone lyrics: mb-8 (2rem)\n+                 className=\"scroll-mt-32\"\n-     \n+               >\n-     let spacingClass = 'mb-8'; // Default spacing between pairs\n+                 {/* Section label - subtle divider */}\n+                 <div className=\"flex items-center mb-10 gap-6\">\n-     if (line.type === 'chord') {\n+                   <div className=\"h-px bg-gradient-to-r from-transparent via-gray-700 to-transparent flex-1\"></div>\n-       // Chord line - tight coupling with following lyric\n+                   <h2 className=\"text-3xl font-semibold tracking-wide uppercase text-gray-500\">\n-       if (nextLine?.type === 'lyric') {\n+                     {section.name}\n-         spacingClass = 'mb-2';\n+                   </h2>\n-       } else {\n+                   <div className=\"h-px bg-gradient-to-r from-transparent via-gray-700 to-transparent flex-1\"></div>\n-         spacingClass = 'mb-8';\n+                 </div>\n-       }\n-     } else if (line.type === 'lyric') {\n+                 {/* Lines with chords and lyrics */}\n-       // Lyric line - standard spacing after\n+                 <div className=\"space-y-8\">\n-       if (nextLine?.type === 'section') {\n+                   {section.lines.map((line, lineIndex) => {\n-         spacingClass = 'mb-16'; // Larger gap before new section\n+                     const isLineActive = isSectionActive && lineIndex === activeLineIndex;\n-       } else if (nextLine?.type === 'chord' || nextLine?.type === 'lyric') {\n+                     \n-         spacingClass = 'mb-8'; // Standard spacing\n+                     return (\n-       } else {\n+                       <div\n-         spacingClass = 'mb-12'; // End of content block\n+                         key={lineIndex}\n-       }\n+                         ref={isLineActive ? activeLineRef : null}\n-     } else if (line.type === 'section') {\n+                         className={`transition-all duration-300 rounded-lg px-8 py-6 ${\n-       // Section header - extra space after to separate from previous content\n+                           isLineActive \n-       spacingClass = prevLine ? 'mb-6 mt-16' : 'mb-6';\n+                             ? 'bg-gray-900 ring-2 ring-amber-500/50 shadow-2xl shadow-amber-500/20' \n-     }\n+                             : 'opacity-50 hover:opacity-75'\n+                         }`}\n-     switch (line.type) {\n+                       >\n-       case 'section':\n+                         {/* Chords - prominent but distinct from lyrics */}\n-         return (\n+                         {line.chords && line.chords.length > 0 && (\n-           <div\n+                           <div className=\"mb-3 flex flex-wrap gap-6\">\n-             key={index}\n+                             {line.chords.map((chord, chordIndex) => (\n-             className={`${spacingClass} text-cyan-400 font-bold tracking-wider uppercase`}\n+                               <span\n-             style={{\n+                                 key={chordIndex}\n-               fontSize: `${fontSize * 0.7}rem`,\n+                                 className=\"text-[3.5rem] font-bold text-amber-400 tracking-wide leading-none\"\n-               lineHeight: '1.8',\n+                                 style={{\n-               letterSpacing: '0.1em',\n+                                   textShadow: isLineActive ? '0 0 20px rgba(251, 191, 36, 0.5)' : 'none'\n-             }}\n+                                 }}\n-           >\n+                               >\n-             {line.content}\n+                                 {chord.chord}\n-           </div>\n+                               </span>\n-         );\n+                             ))}\n+                           </div>\n-       case 'chord':\n+                         )}\n-         return (\n-           <div\n+                         {/* Lyrics - MAXIMUM visibility for stage performance */}\n-             key={index}\n+                         <div \n-             className={`${spacingClass} text-amber-400 font-mono font-semibold`}\n+                           className=\"text-[4rem] font-medium leading-[1.9] text-white\"\n-             style={{\n+                           style={{\n-               fontSize: `${fontSize * 0.75}rem`,\n+                             textShadow: isLineActive ? '0 2px 8px rgba(0, 0, 0, 0.8)' : 'none',\n-               lineHeight: '1.8',\n+                             letterSpacing: '0.02em'\n-               letterSpacing: '0.05em',\n+                           }}\n-             }}\n+                         >\n-           >\n+                           {line.lyrics || '...'}\n-             {line.content}\n+                         </div>\n-           </div>\n+                       </div>\n-         );\n+                     );\n+                   })}\n-       case 'lyric':\n+                 </div>\n-         return (\n+               </div>\n-           <div\n+             );\n-             key={index}\n+           })}\n-             className={`${spacingClass} text-white font-light`}\n+         </div>\n-             style={{\n-               fontSize: `${fontSize}rem`,\n+         {/* Bottom padding for scroll comfort */}\n-               lineHeight: '1.9',\n+         <div className=\"h-96\"></div>\n-               letterSpacing: '0.02em',\n+       </div>\n-             }}\n+     </div>\n-           >\n+   );\n-             {line.content}\n+ }\n-           </div>\n-         );\n-       default:\n-         return null;\n-     }\n-   };\n-   return (\n-     <div\n-       ref={containerRef}\n-       className=\"h-full overflow-y-auto bg-slate-950 px-16 py-20 scroll-smooth\"\n-       style={{\n-         scrollBehavior: 'smooth',\n-       }}\n-     >\n-       <div className=\"max-w-5xl mx-auto\">\n-         {/* Song title - large, prominent */}\n-         <h1\n-           className=\"text-white font-bold mb-16 border-b border-slate-800 pb-8\"\n-           style={{\n-             fontSize: `${fontSize * 1.2}rem`,\n-             lineHeight: '1.6',\n-             letterSpacing: '0.02em',\n-           }}\n-         >\n-           {song.title}\n-         </h1>\n-         {/* Artist and key info */}\n-         <div className=\"flex justify-between items-center mb-20 text-slate-400\">\n-           <div\n-             style={{\n-               fontSize: `${fontSize * 0.6}rem`,\n-               lineHeight: '1.8',\n-             }}\n-           >\n-             {song.artist}\n-           </div>\n-           {song.key && (\n-             <div\n-               className=\"font-semibold text-cyan-400\"\n-               style={{\n-                 fontSize: `${fontSize * 0.6}rem`,\n-                 lineHeight: '1.8',\n-               }}\n-             >\n-               Key: {song.key}\n-             </div>\n-           )}\n-         </div>\n-         {/* Chart content with consistent vertical rhythm */}\n-         <div className=\"leading-relaxed\">\n-           {parsedLines.length > 0 ? (\n-             parsedLines.map((line, index) => renderLine(line, index))\n-           ) : (\n-             <div\n-               className=\"text-slate-500 italic\"\n-               style={{\n-                 fontSize: `${fontSize * 0.8}rem`,\n-                 lineHeight: '1.9',\n-               }}\n-             >\n-               No chart available for this song.\n-             </div>\n-           )}\n-         </div>\n-         {/* Bottom padding for comfortable scrolling */}\n-         <div className=\"h-96\" />\n-       </div>\n-     </div>\n-   );\n- }\n"
    },
    {
      "path": "components/TeleprompterView.tsx",
      "type": "edit",
      "oldContent": "import React, { useEffect, useRef } from 'react';\nimport type { SongMap } from '../types';\n\ninterface TeleprompterViewProps {\n  songMap: SongMap | null;\n  currentTime: number;\n  autoScroll?: boolean;\n}\n\nexport default function TeleprompterView({ songMap, currentTime, autoScroll = true }: TeleprompterViewProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const activeLineRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to active line\n  useEffect(() => {\n    if (autoScroll && activeLineRef.current && containerRef.current) {\n      const container = containerRef.current;\n      const activeLine = activeLineRef.current;\n      const containerHeight = container.clientHeight;\n      const lineTop = activeLine.offsetTop;\n      const lineHeight = activeLine.clientHeight;\n      \n      // Scroll to keep active line in the upper third of viewport for stage visibility\n      const targetScroll = lineTop - (containerHeight / 3) + (lineHeight / 2);\n      container.scrollTo({\n        top: targetScroll,\n        behavior: 'smooth'\n      });\n    }\n  }, [currentTime, autoScroll]);\n\n  if (!songMap) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-black text-white\">\n        <p className=\"text-4xl opacity-60\">No song loaded</p>\n      </div>\n    );\n  }\n\n  // Find current active section and line\n  const getCurrentSection = () => {\n    for (const section of songMap.sections) {\n      if (currentTime >= section.startTime && currentTime < section.endTime) {\n        return section;\n      }\n    }\n    return null;\n  };\n\n  const getCurrentLineIndex = (sectionStartTime: number, lines: any[]) => {\n    for (let i = 0; i < lines.length; i++) {\n      const lineTime = sectionStartTime + (lines[i].timestamp || 0);\n      const nextLineTime = i < lines.length - 1 \n        ? sectionStartTime + (lines[i + 1].timestamp || 0)\n        : Infinity;\n      \n      if (currentTime >= lineTime && currentTime < nextLineTime) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  const activeSection = getCurrentSection();\n  const activeLineIndex = activeSection \n    ? getCurrentLineIndex(activeSection.startTime, activeSection.lines)\n    : -1;\n\n  return (\n    <div \n      ref={containerRef}\n      className=\"h-full overflow-y-auto bg-black text-white scrollbar-thin scrollbar-thumb-gray-700 scrollbar-track-transparent\"\n    >\n      {/* Centered content container with max width for optimal reading */}\n      <div className=\"max-w-6xl mx-auto px-12 py-24\">\n        \n        {/* Song title - large but less prominent than lyrics */}\n        <div className=\"text-center mb-20 pb-12 border-b border-gray-800\">\n          <h1 className=\"text-5xl font-bold mb-4 text-white\">\n            {songMap.title}\n          </h1>\n          <p className=\"text-3xl text-gray-400\">\n            {songMap.artist}\n          </p>\n        </div>\n\n        {/* Sections with lyrics */}\n        <div className=\"space-y-16\">\n          {songMap.sections.map((section, sectionIndex) => {\n            const isSectionActive = activeSection?.name === section.name;\n            \n            return (\n              <div \n                key={`${section.name}-${sectionIndex}`}\n                className=\"scroll-mt-32\"\n              >\n                {/* Section label - subtle divider */}\n                <div className=\"flex items-center mb-10 gap-6\">\n                  <div className=\"h-px bg-gradient-to-r from-transparent via-gray-700 to-transparent flex-1\"></div>\n                  <h2 className=\"text-3xl font-semibold tracking-wide uppercase text-gray-500\">\n                    {section.name}\n                  </h2>\n                  <div className=\"h-px bg-gradient-to-r from-transparent via-gray-700 to-transparent flex-1\"></div>\n                </div>\n\n                {/* Lines with chords and lyrics */}\n                <div className=\"space-y-8\">\n                  {section.lines.map((line, lineIndex) => {\n                    const isLineActive = isSectionActive && lineIndex === activeLineIndex;\n                    \n                    return (\n                      <div\n                        key={lineIndex}\n                        ref={isLineActive ? activeLineRef : null}\n                        className={`transition-all duration-300 rounded-lg px-8 py-6 ${\n                          isLineActive \n                            ? 'bg-gray-900 ring-2 ring-amber-500/50 shadow-2xl shadow-amber-500/20' \n                            : 'opacity-50 hover:opacity-75'\n                        }`}\n                      >\n                        {/* Chords - prominent but distinct from lyrics */}\n                        {line.chords && line.chords.length > 0 && (\n                          <div className=\"mb-3 flex flex-wrap gap-6\">\n                            {line.chords.map((chord, chordIndex) => (\n                              <span\n                                key={chordIndex}\n                                className=\"text-[3.5rem] font-bold text-amber-400 tracking-wide leading-none\"\n                                style={{\n                                  textShadow: isLineActive ? '0 0 20px rgba(251, 191, 36, 0.5)' : 'none'\n                                }}\n                              >\n                                {chord.chord}\n                              </span>\n                            ))}\n                          </div>\n                        )}\n\n                        {/* Lyrics - MAXIMUM visibility for stage performance */}\n                        <div \n                          className=\"text-[4rem] font-medium leading-[1.9] text-white\"\n                          style={{\n                            textShadow: isLineActive ? '0 2px 8px rgba(0, 0, 0, 0.8)' : 'none',\n                            letterSpacing: '0.02em'\n                          }}\n                        >\n                          {line.lyrics || '...'}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Bottom padding for scroll comfort */}\n        <div className=\"h-96\"></div>\n      </div>\n    </div>\n  );\n}\n",
      "newContent": "import React, { useEffect, useRef, useState } from 'react';\nimport type { Song } from '../types';\n\ninterface TeleprompterViewProps {\n  song: Song;\n  isPlaying: boolean;\n  currentTime: number;\n  scrollSpeed?: number;\n}\n\ninterface LyricLine {\n  text: string;\n  chords?: Array<{ chord: string; position: number }>;\n  timestamp?: number;\n}\n\nconst TeleprompterView: React.FC<TeleprompterViewProps> = ({\n  song,\n  isPlaying,\n  currentTime,\n  scrollSpeed = 1,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const [parsedLyrics, setParsedLyrics] = useState<LyricLine[]>([]);\n\n  // Parse lyrics to extract chords and clean text\n  useEffect(() => {\n    if (!song.lyrics) {\n      setParsedLyrics([]);\n      return;\n    }\n\n    const lines = song.lyrics.split('\\n');\n    const parsed = lines.map((line) => {\n      const chords: Array<{ chord: string; position: number }> = [];\n      let cleanText = '';\n      let currentPos = 0;\n      \n      // Match chords in brackets like [C], [Am7], [Dm/F]\n      const chordRegex = /\\[([^\\]]+)\\]/g;\n      let lastIndex = 0;\n      let match;\n\n      while ((match = chordRegex.exec(line)) !== null) {\n        // Add text before the chord\n        cleanText += line.slice(lastIndex, match.index);\n        currentPos = cleanText.length;\n        \n        // Store chord and its position\n        chords.push({\n          chord: match[1],\n          position: currentPos,\n        });\n        \n        lastIndex = match.index + match[0].length;\n      }\n      \n      // Add remaining text\n      cleanText += line.slice(lastIndex);\n      \n      return {\n        text: cleanText,\n        chords: chords.length > 0 ? chords : undefined,\n      };\n    });\n\n    setParsedLyrics(parsed);\n  }, [song.lyrics]);\n\n  // Auto-scroll logic\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const interval = setInterval(() => {\n      setScrollPosition((prev) => prev + scrollSpeed * 0.5);\n    }, 16); // ~60fps\n\n    return () => clearInterval(interval);\n  }, [isPlaying, scrollSpeed]);\n\n  // Apply scroll position\n  useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current.scrollTop = scrollPosition;\n    }\n  }, [scrollPosition]);\n\n  // Reset scroll on song change\n  useEffect(() => {\n    setScrollPosition(0);\n  }, [song.id]);\n\n  const renderChordLine = (chords: Array<{ chord: string; position: number }>, lineText: string) => {\n    // Create a string with chords positioned above the text\n    const chordSpacing = Array(lineText.length).fill(' ');\n    \n    chords.forEach(({ chord, position }) => {\n      for (let i = 0; i < chord.length && position + i < chordSpacing.length; i++) {\n        chordSpacing[position + i] = chord[i] || ' ';\n      }\n    });\n\n    return chordSpacing.join('');\n  };\n\n  return (\n    <div className=\"relative h-full w-full bg-gray-900\">\n      {/* Main scrolling content */}\n      <div\n        ref={containerRef}\n        className=\"h-full w-full overflow-y-auto scrollbar-hide px-12 py-24\"\n        style={{\n          scrollBehavior: 'auto',\n        }}\n      >\n        {/* Song title */}\n        <div className=\"mb-16 text-center\">\n          <h1 className=\"text-6xl font-bold text-white mb-4\">\n            {song.title}\n          </h1>\n          <p className=\"text-3xl text-gray-400\">\n            {song.artist}\n          </p>\n        </div>\n\n        {/* Lyrics with chords */}\n        <div className=\"max-w-5xl mx-auto\">\n          {parsedLyrics.map((line, index) => (\n            <div\n              key={index}\n              className=\"mb-8\"\n              style={{\n                lineHeight: '1.8',\n              }}\n            >\n              {/* Chord line - displayed above lyrics */}\n              {line.chords && line.chords.length > 0 && (\n                <div\n                  className=\"font-mono text-amber-300 whitespace-pre mb-2\"\n                  style={{\n                    fontSize: '2rem',\n                    letterSpacing: '0.05em',\n                    textShadow: '0 0 20px rgba(252, 211, 77, 0.5)',\n                  }}\n                >\n                  {renderChordLine(line.chords, line.text)}\n                </div>\n              )}\n              \n              {/* Lyric line */}\n              <div\n                className=\"text-white font-medium\"\n                style={{\n                  fontSize: '3.5rem',\n                  letterSpacing: '0.02em',\n                  textShadow: '0 2px 8px rgba(0, 0, 0, 0.8)',\n                }}\n              >\n                {line.text || '\\u00A0'}\n              </div>\n            </div>\n          ))}\n\n          {/* Spacer for comfortable scrolling */}\n          <div className=\"h-96\"></div>\n        </div>\n      </div>\n\n      {/* Playback indicator */}\n      {isPlaying && (\n        <div className=\"absolute top-8 right-8\">\n          <div className=\"flex items-center gap-3 bg-green-500/20 border-2 border-green-500 rounded-full px-6 py-3\">\n            <div className=\"w-4 h-4 bg-green-500 rounded-full animate-pulse\"></div>\n            <span className=\"text-green-400 font-semibold text-2xl\">LIVE</span>\n          </div>\n        </div>\n      )}\n\n      {/* Progress indicator */}\n      <div className=\"absolute bottom-0 left-0 right-0 h-2 bg-gray-800\">\n        <div\n          className=\"h-full bg-blue-500 transition-all duration-300\"\n          style={{\n            width: `${(currentTime / (song.duration || 1)) * 100}%`,\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default TeleprompterView;",
      "diff": "- import React, { useEffect, useRef } from 'react';\n+ import React, { useEffect, useRef, useState } from 'react';\n- import type { SongMap } from '../types';\n+ import type { Song } from '../types';\n-   songMap: SongMap | null;\n+   song: Song;\n-   currentTime: number;\n+   isPlaying: boolean;\n-   autoScroll?: boolean;\n+   currentTime: number;\n- }\n+   scrollSpeed?: number;\n+ }\n- export default function TeleprompterView({ songMap, currentTime, autoScroll = true }: TeleprompterViewProps) {\n-   const containerRef = useRef<HTMLDivElement>(null);\n+ interface LyricLine {\n-   const activeLineRef = useRef<HTMLDivElement>(null);\n+   text: string;\n+   chords?: Array<{ chord: string; position: number }>;\n-   // Auto-scroll to active line\n+   timestamp?: number;\n-   useEffect(() => {\n+ }\n-     if (autoScroll && activeLineRef.current && containerRef.current) {\n-       const container = containerRef.current;\n+ const TeleprompterView: React.FC<TeleprompterViewProps> = ({\n-       const activeLine = activeLineRef.current;\n+   song,\n-       const containerHeight = container.clientHeight;\n+   isPlaying,\n-       const lineTop = activeLine.offsetTop;\n+   currentTime,\n-       const lineHeight = activeLine.clientHeight;\n+   scrollSpeed = 1,\n-       \n+ }) => {\n-       // Scroll to keep active line in the upper third of viewport for stage visibility\n+   const containerRef = useRef<HTMLDivElement>(null);\n-       const targetScroll = lineTop - (containerHeight / 3) + (lineHeight / 2);\n+   const [scrollPosition, setScrollPosition] = useState(0);\n-       container.scrollTo({\n+   const [parsedLyrics, setParsedLyrics] = useState<LyricLine[]>([]);\n-         top: targetScroll,\n-         behavior: 'smooth'\n+   // Parse lyrics to extract chords and clean text\n-       });\n+   useEffect(() => {\n-     }\n+     if (!song.lyrics) {\n-   }, [currentTime, autoScroll]);\n+       setParsedLyrics([]);\n+       return;\n-   if (!songMap) {\n+     }\n-     return (\n-       <div className=\"flex items-center justify-center h-full bg-black text-white\">\n+     const lines = song.lyrics.split('\\n');\n-         <p className=\"text-4xl opacity-60\">No song loaded</p>\n+     const parsed = lines.map((line) => {\n-       </div>\n+       const chords: Array<{ chord: string; position: number }> = [];\n-     );\n+       let cleanText = '';\n-   }\n+       let currentPos = 0;\n+       \n-   // Find current active section and line\n+       // Match chords in brackets like [C], [Am7], [Dm/F]\n-   const getCurrentSection = () => {\n+       const chordRegex = /\\[([^\\]]+)\\]/g;\n-     for (const section of songMap.sections) {\n+       let lastIndex = 0;\n-       if (currentTime >= section.startTime && currentTime < section.endTime) {\n+       let match;\n-         return section;\n-       }\n+       while ((match = chordRegex.exec(line)) !== null) {\n-     }\n+         // Add text before the chord\n-     return null;\n+         cleanText += line.slice(lastIndex, match.index);\n-   };\n+         currentPos = cleanText.length;\n+         \n-   const getCurrentLineIndex = (sectionStartTime: number, lines: any[]) => {\n+         // Store chord and its position\n-     for (let i = 0; i < lines.length; i++) {\n+         chords.push({\n-       const lineTime = sectionStartTime + (lines[i].timestamp || 0);\n+           chord: match[1],\n-       const nextLineTime = i < lines.length - 1 \n+           position: currentPos,\n-         ? sectionStartTime + (lines[i + 1].timestamp || 0)\n+         });\n-         : Infinity;\n+         \n-       \n+         lastIndex = match.index + match[0].length;\n-       if (currentTime >= lineTime && currentTime < nextLineTime) {\n+       }\n-         return i;\n+       \n-       }\n+       // Add remaining text\n-     }\n+       cleanText += line.slice(lastIndex);\n-     return -1;\n+       \n-   };\n+       return {\n+         text: cleanText,\n-   const activeSection = getCurrentSection();\n+         chords: chords.length > 0 ? chords : undefined,\n-   const activeLineIndex = activeSection \n+       };\n-     ? getCurrentLineIndex(activeSection.startTime, activeSection.lines)\n+     });\n-     : -1;\n+     setParsedLyrics(parsed);\n-   return (\n+   }, [song.lyrics]);\n-     <div \n-       ref={containerRef}\n+   // Auto-scroll logic\n-       className=\"h-full overflow-y-auto bg-black text-white scrollbar-thin scrollbar-thumb-gray-700 scrollbar-track-transparent\"\n+   useEffect(() => {\n-     >\n+     if (!isPlaying) return;\n-       {/* Centered content container with max width for optimal reading */}\n-       <div className=\"max-w-6xl mx-auto px-12 py-24\">\n+     const interval = setInterval(() => {\n-         \n+       setScrollPosition((prev) => prev + scrollSpeed * 0.5);\n-         {/* Song title - large but less prominent than lyrics */}\n+     }, 16); // ~60fps\n-         <div className=\"text-center mb-20 pb-12 border-b border-gray-800\">\n-           <h1 className=\"text-5xl font-bold mb-4 text-white\">\n+     return () => clearInterval(interval);\n-             {songMap.title}\n+   }, [isPlaying, scrollSpeed]);\n-           </h1>\n-           <p className=\"text-3xl text-gray-400\">\n+   // Apply scroll position\n-             {songMap.artist}\n+   useEffect(() => {\n-           </p>\n+     if (containerRef.current) {\n-         </div>\n+       containerRef.current.scrollTop = scrollPosition;\n+     }\n-         {/* Sections with lyrics */}\n+   }, [scrollPosition]);\n-         <div className=\"space-y-16\">\n-           {songMap.sections.map((section, sectionIndex) => {\n+   // Reset scroll on song change\n-             const isSectionActive = activeSection?.name === section.name;\n+   useEffect(() => {\n-             \n+     setScrollPosition(0);\n-             return (\n+   }, [song.id]);\n-               <div \n-                 key={`${section.name}-${sectionIndex}`}\n+   const renderChordLine = (chords: Array<{ chord: string; position: number }>, lineText: string) => {\n-                 className=\"scroll-mt-32\"\n+     // Create a string with chords positioned above the text\n-               >\n+     const chordSpacing = Array(lineText.length).fill(' ');\n-                 {/* Section label - subtle divider */}\n+     \n-                 <div className=\"flex items-center mb-10 gap-6\">\n+     chords.forEach(({ chord, position }) => {\n-                   <div className=\"h-px bg-gradient-to-r from-transparent via-gray-700 to-transparent flex-1\"></div>\n+       for (let i = 0; i < chord.length && position + i < chordSpacing.length; i++) {\n-                   <h2 className=\"text-3xl font-semibold tracking-wide uppercase text-gray-500\">\n+         chordSpacing[position + i] = chord[i] || ' ';\n-                     {section.name}\n+       }\n-                   </h2>\n+     });\n-                   <div className=\"h-px bg-gradient-to-r from-transparent via-gray-700 to-transparent flex-1\"></div>\n-                 </div>\n+     return chordSpacing.join('');\n+   };\n-                 {/* Lines with chords and lyrics */}\n-                 <div className=\"space-y-8\">\n+   return (\n-                   {section.lines.map((line, lineIndex) => {\n+     <div className=\"relative h-full w-full bg-gray-900\">\n-                     const isLineActive = isSectionActive && lineIndex === activeLineIndex;\n+       {/* Main scrolling content */}\n-                     \n+       <div\n-                     return (\n+         ref={containerRef}\n-                       <div\n+         className=\"h-full w-full overflow-y-auto scrollbar-hide px-12 py-24\"\n-                         key={lineIndex}\n+         style={{\n-                         ref={isLineActive ? activeLineRef : null}\n+           scrollBehavior: 'auto',\n-                         className={`transition-all duration-300 rounded-lg px-8 py-6 ${\n+         }}\n-                           isLineActive \n+       >\n-                             ? 'bg-gray-900 ring-2 ring-amber-500/50 shadow-2xl shadow-amber-500/20' \n+         {/* Song title */}\n-                             : 'opacity-50 hover:opacity-75'\n+         <div className=\"mb-16 text-center\">\n-                         }`}\n+           <h1 className=\"text-6xl font-bold text-white mb-4\">\n-                       >\n+             {song.title}\n-                         {/* Chords - prominent but distinct from lyrics */}\n+           </h1>\n-                         {line.chords && line.chords.length > 0 && (\n+           <p className=\"text-3xl text-gray-400\">\n-                           <div className=\"mb-3 flex flex-wrap gap-6\">\n+             {song.artist}\n-                             {line.chords.map((chord, chordIndex) => (\n+           </p>\n-                               <span\n+         </div>\n-                                 key={chordIndex}\n-                                 className=\"text-[3.5rem] font-bold text-amber-400 tracking-wide leading-none\"\n+         {/* Lyrics with chords */}\n-                                 style={{\n+         <div className=\"max-w-5xl mx-auto\">\n-                                   textShadow: isLineActive ? '0 0 20px rgba(251, 191, 36, 0.5)' : 'none'\n+           {parsedLyrics.map((line, index) => (\n-                                 }}\n+             <div\n-                               >\n+               key={index}\n-                                 {chord.chord}\n+               className=\"mb-8\"\n-                               </span>\n+               style={{\n-                             ))}\n+                 lineHeight: '1.8',\n-                           </div>\n+               }}\n-                         )}\n+             >\n+               {/* Chord line - displayed above lyrics */}\n-                         {/* Lyrics - MAXIMUM visibility for stage performance */}\n+               {line.chords && line.chords.length > 0 && (\n-                         <div \n+                 <div\n-                           className=\"text-[4rem] font-medium leading-[1.9] text-white\"\n+                   className=\"font-mono text-amber-300 whitespace-pre mb-2\"\n-                           style={{\n+                   style={{\n-                             textShadow: isLineActive ? '0 2px 8px rgba(0, 0, 0, 0.8)' : 'none',\n+                     fontSize: '2rem',\n-                             letterSpacing: '0.02em'\n+                     letterSpacing: '0.05em',\n-                           }}\n+                     textShadow: '0 0 20px rgba(252, 211, 77, 0.5)',\n-                         >\n+                   }}\n-                           {line.lyrics || '...'}\n+                 >\n-                         </div>\n+                   {renderChordLine(line.chords, line.text)}\n-                       </div>\n+                 </div>\n-                     );\n+               )}\n-                   })}\n+               \n-                 </div>\n+               {/* Lyric line */}\n-               </div>\n+               <div\n-             );\n+                 className=\"text-white font-medium\"\n-           })}\n+                 style={{\n-         </div>\n+                   fontSize: '3.5rem',\n+                   letterSpacing: '0.02em',\n-         {/* Bottom padding for scroll comfort */}\n+                   textShadow: '0 2px 8px rgba(0, 0, 0, 0.8)',\n-         <div className=\"h-96\"></div>\n+                 }}\n-       </div>\n+               >\n-     </div>\n+                 {line.text || '\\u00A0'}\n-   );\n+               </div>\n- }\n+             </div>\n+           ))}\n+           {/* Spacer for comfortable scrolling */}\n+           <div className=\"h-96\"></div>\n+         </div>\n+       </div>\n+       {/* Playback indicator */}\n+       {isPlaying && (\n+         <div className=\"absolute top-8 right-8\">\n+           <div className=\"flex items-center gap-3 bg-green-500/20 border-2 border-green-500 rounded-full px-6 py-3\">\n+             <div className=\"w-4 h-4 bg-green-500 rounded-full animate-pulse\"></div>\n+             <span className=\"text-green-400 font-semibold text-2xl\">LIVE</span>\n+           </div>\n+         </div>\n+       )}\n+       {/* Progress indicator */}\n+       <div className=\"absolute bottom-0 left-0 right-0 h-2 bg-gray-800\">\n+         <div\n+           className=\"h-full bg-blue-500 transition-all duration-300\"\n+           style={{\n+             width: `${(currentTime / (song.duration || 1)) * 100}%`,\n+           }}\n+         ></div>\n+       </div>\n+     </div>\n+   );\n+ };\n+ export default TeleprompterView;\n"
    },
    {
      "path": "components/TeleprompterView.tsx",
      "type": "edit",
      "oldContent": "import React, { useEffect, useRef, useState } from 'react';\nimport type { Song } from '../types';\n\ninterface TeleprompterViewProps {\n  song: Song;\n  isPlaying: boolean;\n  currentTime: number;\n  scrollSpeed?: number;\n}\n\ninterface LyricLine {\n  text: string;\n  chords?: Array<{ chord: string; position: number }>;\n  timestamp?: number;\n}\n\nconst TeleprompterView: React.FC<TeleprompterViewProps> = ({\n  song,\n  isPlaying,\n  currentTime,\n  scrollSpeed = 1,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const [parsedLyrics, setParsedLyrics] = useState<LyricLine[]>([]);\n\n  // Parse lyrics to extract chords and clean text\n  useEffect(() => {\n    if (!song.lyrics) {\n      setParsedLyrics([]);\n      return;\n    }\n\n    const lines = song.lyrics.split('\\n');\n    const parsed = lines.map((line) => {\n      const chords: Array<{ chord: string; position: number }> = [];\n      let cleanText = '';\n      let currentPos = 0;\n      \n      // Match chords in brackets like [C], [Am7], [Dm/F]\n      const chordRegex = /\\[([^\\]]+)\\]/g;\n      let lastIndex = 0;\n      let match;\n\n      while ((match = chordRegex.exec(line)) !== null) {\n        // Add text before the chord\n        cleanText += line.slice(lastIndex, match.index);\n        currentPos = cleanText.length;\n        \n        // Store chord and its position\n        chords.push({\n          chord: match[1],\n          position: currentPos,\n        });\n        \n        lastIndex = match.index + match[0].length;\n      }\n      \n      // Add remaining text\n      cleanText += line.slice(lastIndex);\n      \n      return {\n        text: cleanText,\n        chords: chords.length > 0 ? chords : undefined,\n      };\n    });\n\n    setParsedLyrics(parsed);\n  }, [song.lyrics]);\n\n  // Auto-scroll logic\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const interval = setInterval(() => {\n      setScrollPosition((prev) => prev + scrollSpeed * 0.5);\n    }, 16); // ~60fps\n\n    return () => clearInterval(interval);\n  }, [isPlaying, scrollSpeed]);\n\n  // Apply scroll position\n  useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current.scrollTop = scrollPosition;\n    }\n  }, [scrollPosition]);\n\n  // Reset scroll on song change\n  useEffect(() => {\n    setScrollPosition(0);\n  }, [song.id]);\n\n  const renderChordLine = (chords: Array<{ chord: string; position: number }>, lineText: string) => {\n    // Create a string with chords positioned above the text\n    const chordSpacing = Array(lineText.length).fill(' ');\n    \n    chords.forEach(({ chord, position }) => {\n      for (let i = 0; i < chord.length && position + i < chordSpacing.length; i++) {\n        chordSpacing[position + i] = chord[i] || ' ';\n      }\n    });\n\n    return chordSpacing.join('');\n  };\n\n  return (\n    <div className=\"relative h-full w-full bg-gray-900\">\n      {/* Main scrolling content */}\n      <div\n        ref={containerRef}\n        className=\"h-full w-full overflow-y-auto scrollbar-hide px-12 py-24\"\n        style={{\n          scrollBehavior: 'auto',\n        }}\n      >\n        {/* Song title */}\n        <div className=\"mb-16 text-center\">\n          <h1 className=\"text-6xl font-bold text-white mb-4\">\n            {song.title}\n          </h1>\n          <p className=\"text-3xl text-gray-400\">\n            {song.artist}\n          </p>\n        </div>\n\n        {/* Lyrics with chords */}\n        <div className=\"max-w-5xl mx-auto\">\n          {parsedLyrics.map((line, index) => (\n            <div\n              key={index}\n              className=\"mb-8\"\n              style={{\n                lineHeight: '1.8',\n              }}\n            >\n              {/* Chord line - displayed above lyrics */}\n              {line.chords && line.chords.length > 0 && (\n                <div\n                  className=\"font-mono text-amber-300 whitespace-pre mb-2\"\n                  style={{\n                    fontSize: '2rem',\n                    letterSpacing: '0.05em',\n                    textShadow: '0 0 20px rgba(252, 211, 77, 0.5)',\n                  }}\n                >\n                  {renderChordLine(line.chords, line.text)}\n                </div>\n              )}\n              \n              {/* Lyric line */}\n              <div\n                className=\"text-white font-medium\"\n                style={{\n                  fontSize: '3.5rem',\n                  letterSpacing: '0.02em',\n                  textShadow: '0 2px 8px rgba(0, 0, 0, 0.8)',\n                }}\n              >\n                {line.text || '\\u00A0'}\n              </div>\n            </div>\n          ))}\n\n          {/* Spacer for comfortable scrolling */}\n          <div className=\"h-96\"></div>\n        </div>\n      </div>\n\n      {/* Playback indicator */}\n      {isPlaying && (\n        <div className=\"absolute top-8 right-8\">\n          <div className=\"flex items-center gap-3 bg-green-500/20 border-2 border-green-500 rounded-full px-6 py-3\">\n            <div className=\"w-4 h-4 bg-green-500 rounded-full animate-pulse\"></div>\n            <span className=\"text-green-400 font-semibold text-2xl\">LIVE</span>\n          </div>\n        </div>\n      )}\n\n      {/* Progress indicator */}\n      <div className=\"absolute bottom-0 left-0 right-0 h-2 bg-gray-800\">\n        <div\n          className=\"h-full bg-blue-500 transition-all duration-300\"\n          style={{\n            width: `${(currentTime / (song.duration || 1)) * 100}%`,\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default TeleprompterView;",
      "newContent": "import React, { useState, useEffect, useRef } from 'react';\nimport { Song } from '../types';\n\ninterface TeleprompterViewProps {\n  song: Song;\n  fontSize: number;\n  scrollSpeed: number;\n  showChords: boolean;\n  onClose: () => void;\n}\n\ninterface SongSection {\n  name: string;\n  startLine: number;\n  endLine: number;\n}\n\nconst TeleprompterView: React.FC<TeleprompterViewProps> = ({\n  song,\n  fontSize,\n  scrollSpeed,\n  showChords,\n  onClose,\n}) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [scrollProgress, setScrollProgress] = useState(0);\n  const [currentSection, setCurrentSection] = useState('Intro');\n  const contentRef = useRef<HTMLDivElement>(null);\n  const scrollIntervalRef = useRef<number | null>(null);\n\n  // Parse song structure to identify sections\n  const parseSections = (): SongSection[] => {\n    const lines = song.lyrics.split('\\n');\n    const sections: SongSection[] = [];\n    let currentSectionName = 'Intro';\n    let currentStartLine = 0;\n\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n      // Detect section headers (e.g., [Verse 1], [Chorus], etc.)\n      const sectionMatch = trimmedLine.match(/^\\[([^\\]]+)\\]/);\n      \n      if (sectionMatch) {\n        // Save previous section\n        if (index > currentStartLine) {\n          sections.push({\n            name: currentSectionName,\n            startLine: currentStartLine,\n            endLine: index - 1,\n          });\n        }\n        // Start new section\n        currentSectionName = sectionMatch[1];\n        currentStartLine = index;\n      }\n    });\n\n    // Add final section\n    sections.push({\n      name: currentSectionName,\n      startLine: currentStartLine,\n      endLine: lines.length - 1,\n    });\n\n    return sections.filter(s => s.endLine >= s.startLine);\n  };\n\n  const sections = parseSections();\n\n  // Update current section and progress based on scroll position\n  const updateProgress = () => {\n    if (!contentRef.current) return;\n\n    const container = contentRef.current;\n    const scrollTop = container.scrollTop;\n    const scrollHeight = container.scrollHeight - container.clientHeight;\n    const progress = scrollHeight > 0 ? (scrollTop / scrollHeight) * 100 : 0;\n    \n    setScrollProgress(Math.min(100, Math.max(0, progress)));\n\n    // Determine current section based on scroll position\n    const lines = song.lyrics.split('\\n');\n    const avgLineHeight = scrollHeight / lines.length;\n    const currentLine = Math.floor(scrollTop / avgLineHeight);\n\n    const active = sections.find(\n      s => currentLine >= s.startLine && currentLine <= s.endLine\n    );\n    \n    if (active) {\n      setCurrentSection(active.name);\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying && contentRef.current) {\n      scrollIntervalRef.current = window.setInterval(() => {\n        if (contentRef.current) {\n          contentRef.current.scrollTop += scrollSpeed;\n          updateProgress();\n        }\n      }, 50);\n    } else if (scrollIntervalRef.current) {\n      clearInterval(scrollIntervalRef.current);\n      scrollIntervalRef.current = null;\n    }\n\n    return () => {\n      if (scrollIntervalRef.current) {\n        clearInterval(scrollIntervalRef.current);\n      }\n    };\n  }, [isPlaying, scrollSpeed]);\n\n  useEffect(() => {\n    const container = contentRef.current;\n    if (container) {\n      container.addEventListener('scroll', updateProgress);\n      updateProgress(); // Initial calculation\n      return () => container.removeEventListener('scroll', updateProgress);\n    }\n  }, [song, sections]);\n\n  const handleKeyPress = (e: KeyboardEvent) => {\n    if (e.code === 'Space') {\n      e.preventDefault();\n      setIsPlaying(!isPlaying);\n    } else if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isPlaying]);\n\n  const renderLyricsWithChords = () => {\n    const lines = song.lyrics.split('\\n');\n    return lines.map((line, index) => {\n      const trimmedLine = line.trim();\n      \n      // Check if line is a section header\n      const isSectionHeader = /^\\[([^\\]]+)\\]/.test(trimmedLine);\n      \n      if (isSectionHeader) {\n        return (\n          <div\n            key={index}\n            className=\"text-emerald-400 font-bold mb-6 mt-8\"\n            style={{ fontSize: `${fontSize * 0.7}rem`, lineHeight: 1.6 }}\n          >\n            {trimmedLine}\n          </div>\n        );\n      }\n\n      // Check if line contains chords (simple heuristic: contains common chord patterns)\n      const isChordLine = showChords && /[A-G](#|b)?(m|maj|min|dim|aug|sus)?[0-9]?/.test(trimmedLine) && trimmedLine.length < 50;\n\n      if (isChordLine) {\n        return (\n          <div\n            key={index}\n            className=\"text-amber-400 font-semibold mb-2\"\n            style={{ fontSize: `${fontSize * 0.6}rem`, lineHeight: 1.8 }}\n          >\n            {line || '\\u00A0'}\n          </div>\n        );\n      }\n\n      return (\n        <div\n          key={index}\n          className=\"text-white mb-4\"\n          style={{ fontSize: `${fontSize}rem`, lineHeight: 2.0 }}\n        >\n          {line || '\\u00A0'}\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-900 z-50 flex flex-col\">\n      {/* Song Structure Indicator - Top Left */}\n      <div className=\"absolute top-0 left-0 z-10 p-6\">\n        <div className=\"bg-gray-800/90 backdrop-blur-sm px-6 py-4 rounded-lg border-2 border-emerald-500/50 shadow-2xl\">\n          <div className=\"text-emerald-400 font-bold\" style={{ fontSize: '2rem', lineHeight: 1.2 }}>\n            {currentSection}\n          </div>\n        </div>\n      </div>\n\n      {/* Progress Bar - Top */}\n      <div className=\"absolute top-0 left-0 right-0 z-10\">\n        <div className=\"h-2 bg-gray-800/50\">\n          <div\n            className=\"h-full bg-gradient-to-r from-emerald-500 to-emerald-400 transition-all duration-200 ease-linear shadow-lg shadow-emerald-500/50\"\n            style={{ width: `${scrollProgress}%` }}\n          />\n        </div>\n      </div>\n\n      {/* Header with controls */}\n      <div className=\"bg-gray-800 px-6 py-4 flex items-center justify-between border-b-2 border-gray-700 mt-2\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-white mb-1\">{song.title}</h1>\n          <p className=\"text-xl text-gray-400\">{song.artist}</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <button\n            onClick={() => setIsPlaying(!isPlaying)}\n            className=\"px-8 py-4 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg text-2xl font-semibold transition-colors\"\n          >\n            {isPlaying ? 'Pause' : 'Play'}\n          </button>\n          <button\n            onClick={onClose}\n            className=\"px-8 py-4 bg-gray-700 hover:bg-gray-600 text-white rounded-lg text-2xl font-semibold transition-colors\"\n          >\n            Exit\n          </button>\n        </div>\n      </div>\n\n      {/* Scrolling lyrics content */}\n      <div\n        ref={contentRef}\n        className=\"flex-1 overflow-y-auto px-12 py-16 scroll-smooth\"\n        style={{\n          scrollBehavior: 'smooth',\n        }}\n      >\n        <div className=\"max-w-5xl mx-auto\">\n          {renderLyricsWithChords()}\n          {/* Extra space at bottom for comfortable reading */}\n          <div style={{ height: '60vh' }} />\n        </div>\n      </div>\n\n      {/* Keyboard shortcuts hint */}\n      <div className=\"absolute bottom-6 right-6 text-gray-500 text-lg\">\n        <div>SPACE: Play/Pause</div>\n        <div>ESC: Exit</div>\n      </div>\n    </div>\n  );\n};\n\nexport default TeleprompterView;",
      "diff": "- import React, { useEffect, useRef, useState } from 'react';\n+ import React, { useState, useEffect, useRef } from 'react';\n- import type { Song } from '../types';\n+ import { Song } from '../types';\n-   isPlaying: boolean;\n+   fontSize: number;\n-   currentTime: number;\n+   scrollSpeed: number;\n-   scrollSpeed?: number;\n+   showChords: boolean;\n- }\n+   onClose: () => void;\n+ }\n- interface LyricLine {\n-   text: string;\n+ interface SongSection {\n-   chords?: Array<{ chord: string; position: number }>;\n+   name: string;\n-   timestamp?: number;\n+   startLine: number;\n- }\n+   endLine: number;\n+ }\n- const TeleprompterView: React.FC<TeleprompterViewProps> = ({\n-   song,\n+ const TeleprompterView: React.FC<TeleprompterViewProps> = ({\n-   isPlaying,\n+   song,\n-   currentTime,\n+   fontSize,\n-   scrollSpeed = 1,\n+   scrollSpeed,\n- }) => {\n+   showChords,\n-   const containerRef = useRef<HTMLDivElement>(null);\n+   onClose,\n-   const [scrollPosition, setScrollPosition] = useState(0);\n+ }) => {\n-   const [parsedLyrics, setParsedLyrics] = useState<LyricLine[]>([]);\n+   const [isPlaying, setIsPlaying] = useState(false);\n+   const [scrollProgress, setScrollProgress] = useState(0);\n-   // Parse lyrics to extract chords and clean text\n+   const [currentSection, setCurrentSection] = useState('Intro');\n-   useEffect(() => {\n+   const contentRef = useRef<HTMLDivElement>(null);\n-     if (!song.lyrics) {\n+   const scrollIntervalRef = useRef<number | null>(null);\n-       setParsedLyrics([]);\n-       return;\n+   // Parse song structure to identify sections\n-     }\n+   const parseSections = (): SongSection[] => {\n+     const lines = song.lyrics.split('\\n');\n-     const lines = song.lyrics.split('\\n');\n+     const sections: SongSection[] = [];\n-     const parsed = lines.map((line) => {\n+     let currentSectionName = 'Intro';\n-       const chords: Array<{ chord: string; position: number }> = [];\n+     let currentStartLine = 0;\n-       let cleanText = '';\n-       let currentPos = 0;\n+     lines.forEach((line, index) => {\n-       \n+       const trimmedLine = line.trim();\n-       // Match chords in brackets like [C], [Am7], [Dm/F]\n+       // Detect section headers (e.g., [Verse 1], [Chorus], etc.)\n-       const chordRegex = /\\[([^\\]]+)\\]/g;\n+       const sectionMatch = trimmedLine.match(/^\\[([^\\]]+)\\]/);\n-       let lastIndex = 0;\n+       \n-       let match;\n+       if (sectionMatch) {\n+         // Save previous section\n-       while ((match = chordRegex.exec(line)) !== null) {\n+         if (index > currentStartLine) {\n-         // Add text before the chord\n+           sections.push({\n-         cleanText += line.slice(lastIndex, match.index);\n+             name: currentSectionName,\n-         currentPos = cleanText.length;\n+             startLine: currentStartLine,\n-         \n+             endLine: index - 1,\n-         // Store chord and its position\n+           });\n-         chords.push({\n+         }\n-           chord: match[1],\n+         // Start new section\n-           position: currentPos,\n+         currentSectionName = sectionMatch[1];\n-         });\n+         currentStartLine = index;\n-         \n+       }\n-         lastIndex = match.index + match[0].length;\n+     });\n-       }\n-       \n+     // Add final section\n-       // Add remaining text\n+     sections.push({\n-       cleanText += line.slice(lastIndex);\n+       name: currentSectionName,\n-       \n+       startLine: currentStartLine,\n-       return {\n+       endLine: lines.length - 1,\n-         text: cleanText,\n+     });\n-         chords: chords.length > 0 ? chords : undefined,\n-       };\n+     return sections.filter(s => s.endLine >= s.startLine);\n-     });\n+   };\n-     setParsedLyrics(parsed);\n+   const sections = parseSections();\n-   }, [song.lyrics]);\n+   // Update current section and progress based on scroll position\n-   // Auto-scroll logic\n+   const updateProgress = () => {\n-   useEffect(() => {\n+     if (!contentRef.current) return;\n-     if (!isPlaying) return;\n+     const container = contentRef.current;\n-     const interval = setInterval(() => {\n+     const scrollTop = container.scrollTop;\n-       setScrollPosition((prev) => prev + scrollSpeed * 0.5);\n+     const scrollHeight = container.scrollHeight - container.clientHeight;\n-     }, 16); // ~60fps\n+     const progress = scrollHeight > 0 ? (scrollTop / scrollHeight) * 100 : 0;\n+     \n-     return () => clearInterval(interval);\n+     setScrollProgress(Math.min(100, Math.max(0, progress)));\n-   }, [isPlaying, scrollSpeed]);\n+     // Determine current section based on scroll position\n-   // Apply scroll position\n+     const lines = song.lyrics.split('\\n');\n-   useEffect(() => {\n+     const avgLineHeight = scrollHeight / lines.length;\n-     if (containerRef.current) {\n+     const currentLine = Math.floor(scrollTop / avgLineHeight);\n-       containerRef.current.scrollTop = scrollPosition;\n-     }\n+     const active = sections.find(\n-   }, [scrollPosition]);\n+       s => currentLine >= s.startLine && currentLine <= s.endLine\n+     );\n-   // Reset scroll on song change\n+     \n-   useEffect(() => {\n+     if (active) {\n-     setScrollPosition(0);\n+       setCurrentSection(active.name);\n-   }, [song.id]);\n+     }\n+   };\n-   const renderChordLine = (chords: Array<{ chord: string; position: number }>, lineText: string) => {\n-     // Create a string with chords positioned above the text\n+   useEffect(() => {\n-     const chordSpacing = Array(lineText.length).fill(' ');\n+     if (isPlaying && contentRef.current) {\n-     \n+       scrollIntervalRef.current = window.setInterval(() => {\n-     chords.forEach(({ chord, position }) => {\n+         if (contentRef.current) {\n-       for (let i = 0; i < chord.length && position + i < chordSpacing.length; i++) {\n+           contentRef.current.scrollTop += scrollSpeed;\n-         chordSpacing[position + i] = chord[i] || ' ';\n+           updateProgress();\n-       }\n+         }\n-     });\n+       }, 50);\n+     } else if (scrollIntervalRef.current) {\n-     return chordSpacing.join('');\n+       clearInterval(scrollIntervalRef.current);\n-   };\n+       scrollIntervalRef.current = null;\n+     }\n-   return (\n-     <div className=\"relative h-full w-full bg-gray-900\">\n+     return () => {\n-       {/* Main scrolling content */}\n+       if (scrollIntervalRef.current) {\n-       <div\n+         clearInterval(scrollIntervalRef.current);\n-         ref={containerRef}\n+       }\n-         className=\"h-full w-full overflow-y-auto scrollbar-hide px-12 py-24\"\n+     };\n-         style={{\n+   }, [isPlaying, scrollSpeed]);\n-           scrollBehavior: 'auto',\n-         }}\n+   useEffect(() => {\n-       >\n+     const container = contentRef.current;\n-         {/* Song title */}\n+     if (container) {\n-         <div className=\"mb-16 text-center\">\n+       container.addEventListener('scroll', updateProgress);\n-           <h1 className=\"text-6xl font-bold text-white mb-4\">\n+       updateProgress(); // Initial calculation\n-             {song.title}\n+       return () => container.removeEventListener('scroll', updateProgress);\n-           </h1>\n+     }\n-           <p className=\"text-3xl text-gray-400\">\n+   }, [song, sections]);\n-             {song.artist}\n-           </p>\n+   const handleKeyPress = (e: KeyboardEvent) => {\n-         </div>\n+     if (e.code === 'Space') {\n+       e.preventDefault();\n-         {/* Lyrics with chords */}\n+       setIsPlaying(!isPlaying);\n-         <div className=\"max-w-5xl mx-auto\">\n+     } else if (e.code === 'Escape') {\n-           {parsedLyrics.map((line, index) => (\n+       onClose();\n-             <div\n+     }\n-               key={index}\n+   };\n-               className=\"mb-8\"\n-               style={{\n+   useEffect(() => {\n-                 lineHeight: '1.8',\n+     window.addEventListener('keydown', handleKeyPress);\n-               }}\n+     return () => window.removeEventListener('keydown', handleKeyPress);\n-             >\n+   }, [isPlaying]);\n-               {/* Chord line - displayed above lyrics */}\n-               {line.chords && line.chords.length > 0 && (\n+   const renderLyricsWithChords = () => {\n-                 <div\n+     const lines = song.lyrics.split('\\n');\n-                   className=\"font-mono text-amber-300 whitespace-pre mb-2\"\n+     return lines.map((line, index) => {\n-                   style={{\n+       const trimmedLine = line.trim();\n-                     fontSize: '2rem',\n+       \n-                     letterSpacing: '0.05em',\n+       // Check if line is a section header\n-                     textShadow: '0 0 20px rgba(252, 211, 77, 0.5)',\n+       const isSectionHeader = /^\\[([^\\]]+)\\]/.test(trimmedLine);\n-                   }}\n+       \n-                 >\n+       if (isSectionHeader) {\n-                   {renderChordLine(line.chords, line.text)}\n+         return (\n-                 </div>\n+           <div\n-               )}\n+             key={index}\n-               \n+             className=\"text-emerald-400 font-bold mb-6 mt-8\"\n-               {/* Lyric line */}\n+             style={{ fontSize: `${fontSize * 0.7}rem`, lineHeight: 1.6 }}\n-               <div\n+           >\n-                 className=\"text-white font-medium\"\n+             {trimmedLine}\n-                 style={{\n+           </div>\n-                   fontSize: '3.5rem',\n+         );\n-                   letterSpacing: '0.02em',\n+       }\n-                   textShadow: '0 2px 8px rgba(0, 0, 0, 0.8)',\n-                 }}\n+       // Check if line contains chords (simple heuristic: contains common chord patterns)\n-               >\n+       const isChordLine = showChords && /[A-G](#|b)?(m|maj|min|dim|aug|sus)?[0-9]?/.test(trimmedLine) && trimmedLine.length < 50;\n-                 {line.text || '\\u00A0'}\n-               </div>\n+       if (isChordLine) {\n-             </div>\n+         return (\n-           ))}\n+           <div\n+             key={index}\n-           {/* Spacer for comfortable scrolling */}\n+             className=\"text-amber-400 font-semibold mb-2\"\n-           <div className=\"h-96\"></div>\n+             style={{ fontSize: `${fontSize * 0.6}rem`, lineHeight: 1.8 }}\n-         </div>\n+           >\n-       </div>\n+             {line || '\\u00A0'}\n+           </div>\n-       {/* Playback indicator */}\n+         );\n-       {isPlaying && (\n+       }\n-         <div className=\"absolute top-8 right-8\">\n-           <div className=\"flex items-center gap-3 bg-green-500/20 border-2 border-green-500 rounded-full px-6 py-3\">\n+       return (\n-             <div className=\"w-4 h-4 bg-green-500 rounded-full animate-pulse\"></div>\n+         <div\n-             <span className=\"text-green-400 font-semibold text-2xl\">LIVE</span>\n+           key={index}\n-           </div>\n+           className=\"text-white mb-4\"\n-         </div>\n+           style={{ fontSize: `${fontSize}rem`, lineHeight: 2.0 }}\n-       )}\n+         >\n+           {line || '\\u00A0'}\n-       {/* Progress indicator */}\n+         </div>\n-       <div className=\"absolute bottom-0 left-0 right-0 h-2 bg-gray-800\">\n+       );\n-         <div\n+     });\n-           className=\"h-full bg-blue-500 transition-all duration-300\"\n+   };\n-           style={{\n-             width: `${(currentTime / (song.duration || 1)) * 100}%`,\n+   return (\n-           }}\n+     <div className=\"fixed inset-0 bg-gray-900 z-50 flex flex-col\">\n-         ></div>\n+       {/* Song Structure Indicator - Top Left */}\n-       </div>\n+       <div className=\"absolute top-0 left-0 z-10 p-6\">\n-     </div>\n+         <div className=\"bg-gray-800/90 backdrop-blur-sm px-6 py-4 rounded-lg border-2 border-emerald-500/50 shadow-2xl\">\n-   );\n+           <div className=\"text-emerald-400 font-bold\" style={{ fontSize: '2rem', lineHeight: 1.2 }}>\n- };\n+             {currentSection}\n+           </div>\n- export default TeleprompterView;\n+         </div>\n+       </div>\n+       {/* Progress Bar - Top */}\n+       <div className=\"absolute top-0 left-0 right-0 z-10\">\n+         <div className=\"h-2 bg-gray-800/50\">\n+           <div\n+             className=\"h-full bg-gradient-to-r from-emerald-500 to-emerald-400 transition-all duration-200 ease-linear shadow-lg shadow-emerald-500/50\"\n+             style={{ width: `${scrollProgress}%` }}\n+           />\n+         </div>\n+       </div>\n+       {/* Header with controls */}\n+       <div className=\"bg-gray-800 px-6 py-4 flex items-center justify-between border-b-2 border-gray-700 mt-2\">\n+         <div>\n+           <h1 className=\"text-3xl font-bold text-white mb-1\">{song.title}</h1>\n+           <p className=\"text-xl text-gray-400\">{song.artist}</p>\n+         </div>\n+         <div className=\"flex items-center gap-4\">\n+           <button\n+             onClick={() => setIsPlaying(!isPlaying)}\n+             className=\"px-8 py-4 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg text-2xl font-semibold transition-colors\"\n+           >\n+             {isPlaying ? 'Pause' : 'Play'}\n+           </button>\n+           <button\n+             onClick={onClose}\n+             className=\"px-8 py-4 bg-gray-700 hover:bg-gray-600 text-white rounded-lg text-2xl font-semibold transition-colors\"\n+           >\n+             Exit\n+           </button>\n+         </div>\n+       </div>\n+       {/* Scrolling lyrics content */}\n+       <div\n+         ref={contentRef}\n+         className=\"flex-1 overflow-y-auto px-12 py-16 scroll-smooth\"\n+         style={{\n+           scrollBehavior: 'smooth',\n+         }}\n+       >\n+         <div className=\"max-w-5xl mx-auto\">\n+           {renderLyricsWithChords()}\n+           {/* Extra space at bottom for comfortable reading */}\n+           <div style={{ height: '60vh' }} />\n+         </div>\n+       </div>\n+       {/* Keyboard shortcuts hint */}\n+       <div className=\"absolute bottom-6 right-6 text-gray-500 text-lg\">\n+         <div>SPACE: Play/Pause</div>\n+         <div>ESC: Exit</div>\n+       </div>\n+     </div>\n+   );\n+ };\n+ export default TeleprompterView;\n"
    }
  ],
  "summary": "Orchestrated 3 file changes across 2 specialist agents",
  "buildCommand": "npm run build",
  "testCommand": "npm test"
}
